{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "SCCU-EU-Data-Factory"
		},
		"SCCU_DataFactory_FileShare_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SCCU_DataFactory_FileShare'"
		},
		"SCCU_OfflineModedb_PROD_DTU_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SCCU_OfflineModedb_PROD_DTU'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=sccuprodsqldtu.database.windows.net;Initial Catalog=SCCU_OfflineModedb_PROD"
		},
		"SCCU_AdminLogdb_PROD_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccusqlmi.247d28acc382.database.windows.net"
		},
		"SCCU_AdminLogdb_PROD_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_AdminLogdb_PROD"
		},
		"SCCU_AdminMetadb_PROD_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccusqlmi.247d28acc382.database.windows.net"
		},
		"SCCU_AdminMetadb_PROD_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_AdminMetadb_PROD"
		},
		"SCCU_AnonymousLogdb_PROD_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccusqlmi.247d28acc382.database.windows.net"
		},
		"SCCU_AnonymousLogdb_PROD_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_AnonymousLogdb_PROD"
		},
		"SCCU_AnonymousMetadb_PROD_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccusqlmi.247d28acc382.database.windows.net"
		},
		"SCCU_AnonymousMetadb_PROD_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_AnonymousMetadb_PROD"
		},
		"SCCU_Archivedb_PROD_DTU_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccuprodsql02.database.windows.net"
		},
		"SCCU_Archivedb_PROD_DTU_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_Archivedb_PROD"
		},
		"SCCU_BBAlertsDev_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccudevsql01.database.windows.net"
		},
		"SCCU_BBAlertsDev_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCUDEV_BBAlerts"
		},
		"SCCU_BBAlertsPROD_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccusqlmi.247d28acc382.database.windows.net"
		},
		"SCCU_BBAlertsPROD_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_BBAlerts_PROD"
		},
		"SCCU_BBAlertsUAT_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccuuatsql01.database.windows.net"
		},
		"SCCU_BBAlertsUAT_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCUUAT_BBAlerts"
		},
		"SCCU_BusinessDataDev_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccudevsql01.database.windows.net"
		},
		"SCCU_BusinessDataDev_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_BusinessData_Dev"
		},
		"SCCU_BusinessDataPROD_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccusqlmi.247d28acc382.database.windows.net"
		},
		"SCCU_BusinessDataPROD_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_Businessdata_PROD"
		},
		"SCCU_BusinessDataUAT_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccuuatsql01.database.windows.net"
		},
		"SCCU_BusinessDataUAT_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_BusinessData_UAT"
		},
		"SCCU_Businessdata_PROD_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccusqlmi.247d28acc382.database.windows.net"
		},
		"SCCU_Businessdata_PROD_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_Businessdata_PROD"
		},
		"SCCU_DataFactory_Storage_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://sccudatafactorystorage.blob.core.windows.net/"
		},
		"SCCU_DataFactory_Storage_V2_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://sccudatafactorystorage01.blob.core.windows.net/"
		},
		"SCCU_Logdb_PROD_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccusqlmi.247d28acc382.database.windows.net"
		},
		"SCCU_Logdb_PROD_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_Logdb_PROD"
		},
		"SCCU_Logdb_PROD_DTU_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccuprodsql02.database.windows.net"
		},
		"SCCU_Logdb_PROD_DTU_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_Logdb_PROD"
		},
		"SCCU_LogsMonitorMetadb_PROD_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccusqlmi.247d28acc382.database.windows.net"
		},
		"SCCU_LogsMonitorMetadb_PROD_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_LogsMonitorMetadb_PROD"
		},
		"SCCU_Metadb_PROD_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sccusqlmi.247d28acc382.database.windows.net"
		},
		"SCCU_Metadb_PROD_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SCCU_Metadb_PROD"
		},
		"PROD_LoanDueTrigger_properties_Nextly_LoanDueAlerts_PROD_parameters_FileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"PROD_LoanDueTrigger_properties_Nextly_LoanDueAlerts_PROD_parameters_FilePath": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"PROD_LoanDueTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.Storage/storageAccounts/sccudatafactorystorage"
		},
		"PROD_ThresholAlert_properties_Nextly_ThresholdAlert_PROD_parameters_FileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"PROD_ThresholAlert_properties_Nextly_ThresholdAlert_PROD_parameters_FilePath": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"PROD_ThresholAlert_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.Storage/storageAccounts/sccudatafactorystorage"
		},
		"PROD_TransactionAlert_properties_Nextly_TransactionAlert_PROD_parameters_FileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"PROD_TransactionAlert_properties_Nextly_TransactionAlert_PROD_parameters_FilePath": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"PROD_TransactionAlert_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.Storage/storageAccounts/sccudatafactorystorage"
		},
		"ToNextlyLoanDueAlert_Prod_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.Storage/storageAccounts/sccudatafactorystorage01"
		},
		"ToNextlyThresholdAlert_Prod_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.Storage/storageAccounts/sccudatafactorystorage01"
		},
		"ToNextlyTransactionAlert_Prod_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.Storage/storageAccounts/sccudatafactorystorage01"
		},
		"SCCU-KEYVAULT_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-PROD-NW-RG/providers/Microsoft.KeyVault/vaults/SCCU-KEYVAULT"
		},
		"SCCU-KEYVAULT_properties_groupId": {
			"type": "string",
			"defaultValue": "vault"
		},
		"SCCU_DataFactory_FileShare_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.Storage/storageAccounts/sccudatafactorystorage"
		},
		"SCCU_DataFactory_FileShare_properties_groupId": {
			"type": "string",
			"defaultValue": "file"
		},
		"sccudatafactorystorage_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.Storage/storageAccounts/sccudatafactorystorage"
		},
		"sccudatafactorystorage_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"sccudatafactorystorage_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"sccudatafactorystorage.blob.core.windows.net"
			]
		},
		"sccudatafactorystorage01_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.Storage/storageAccounts/sccudatafactorystorage01"
		},
		"sccudatafactorystorage01_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"sccudatafactorystorage01_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"sccudatafactorystorage01.blob.core.windows.net"
			]
		},
		"sccudrsql01_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-CU-DR-SRV-RG/providers/Microsoft.Sql/managedInstances/sccudrsql01"
		},
		"sccudrsql01_properties_groupId": {
			"type": "string",
			"defaultValue": "managedInstance"
		},
		"sccuprodsql01_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.Sql/managedInstances/sccuprodsql01"
		},
		"sccuprodsql01_properties_groupId": {
			"type": "string",
			"defaultValue": "managedInstance"
		},
		"sccustagesql02_Temp_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourceGroups/SCCU-EU-STAGE-SRV-RG/providers/Microsoft.Sql/managedInstances/sccustagesql02"
		},
		"sccustagesql02_Temp_properties_groupId": {
			"type": "string",
			"defaultValue": "managedInstance"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/00_DailyRetention_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "PROD_DailyRetention_Main",
				"activities": [
					{
						"name": "If Retention Enabled",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "IsRetentionEnabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('IsRetentionEnabled').output.firstRow['RecordCount'],0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Start Maintenance Notification_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendEmail_Success",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Subject": "SCCU DB daily maintenance Disabled",
											"Content": "SCCU DB daily maintenance Disabled",
											"Importance": "High"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "PROD_DynamicRetention_Main",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Start Maintenance Notification",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PROD_DynamicRetention_Main",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								},
								{
									"name": "SCCUPROD_ActivityLogs_Main",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Start Maintenance Notification",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCCUPROD_ActivityLogs_Main",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								},
								{
									"name": "SendEmailSuccess",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "PROD_DynamicRetention_Main",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SCCUPROD_ActivityLogs_Main",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "AdminLoginHistory",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendEmail_Success",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Subject": {
												"value": "SCCU Daily maintenance has been completed",
												"type": "Expression"
											},
											"Content": {
												"value": "SCCU Daily DB maintenance has been completed.",
												"type": "Expression"
											},
											"Importance": "Normal"
										}
									}
								},
								{
									"name": "SendMainl-ActivityLogFailure",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SCCUPROD_ActivityLogs_Main",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendEmail_Failure",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Subject": {
												"value": "@concat('Pipeline -', activity('SCCUPROD_ActivityLogs_Main').name, ' has been failed')",
												"type": "Expression"
											},
											"Content": {
												"value": "@activity('SCCUPROD_ActivityLogs_Main').output.errors.message",
												"type": "Expression"
											},
											"Importance": "High"
										}
									}
								},
								{
									"name": "SendMainl-BusinessDataFailure_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "PROD_DynamicRetention_Main",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendEmail_Failure",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Subject": {
												"value": "@concat('Pipeline -', activity('PROD_DynamicRetention_Main').name, ' has been failed')",
												"type": "Expression"
											},
											"Content": {
												"value": "@activity('PROD_DynamicRetention_Main').output.errors.message",
												"type": "Expression"
											},
											"Importance": "High"
										}
									}
								},
								{
									"name": "AdminLoginHistory",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Start Maintenance Notification",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCCUPROD_AdminLoginHistory",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								},
								{
									"name": "SendMainl-ActivityLogFailure_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "AdminLoginHistory",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendEmail_Failure",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Subject": {
												"value": "@concat('Pipeline -', activity('AdminLoginHistory').name, ' has been failed')",
												"type": "Expression"
											},
											"Content": {
												"value": "@activity('AdminLoginHistory').output.errors.message",
												"type": "Expression"
											},
											"Importance": "High"
										}
									}
								},
								{
									"name": "Summary Email",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SendEmailSuccess",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Summary_StoredProcedure_Emails",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"procName": "sp_GetEmailData_BacpacRetention_Summary"
										}
									}
								},
								{
									"name": "Start Maintenance Notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendEmail_Success",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Subject": "SCCU DB daily maintenance started",
											"Content": "SCCU DB daily maintenance started",
											"Importance": "Normal"
										}
									}
								}
							]
						}
					},
					{
						"name": "IsRetentionEnabled",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT count(1) as 'RecordCount' FROM [dbo].[DailyRetentionConfig] where PipelineRun=1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Success')]",
				"[concat(variables('factoryId'), '/pipelines/PROD_DynamicRetention_Main')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_ActivityLogs_Main')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_AdminLoginHistory')]",
				"[concat(variables('factoryId'), '/pipelines/Summary_StoredProcedure_Emails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/00_Offline_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MemberData",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MemberDataDetails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "AccountDetails",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "MemberData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NextlyAccountDetails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "UserCreditCard",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "AccountDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "UserCreditCards",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CCMCreditCard",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UserCreditCard",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CCM_CreditCard_AccountDetails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "SavingsAccount",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UserCreditCard",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CK_SAV_Accounttransactions",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DebitCards",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UserCreditCard",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DebitCardDetails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "AccountLockOut",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UserCreditCard",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NextlyAccountlockout",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "AccountRoles",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UserCreditCard",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NextlyAccountRoles",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CrossAccounts",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UserCreditCard",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NextlyCrossAccounts",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "LoanTransaction",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UserCreditCard",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NextlyLoanTransactions",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OfflineServices"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MemberDataDetails')]",
				"[concat(variables('factoryId'), '/pipelines/NextlyAccountDetails')]",
				"[concat(variables('factoryId'), '/pipelines/UserCreditCards')]",
				"[concat(variables('factoryId'), '/pipelines/CCM_CreditCard_AccountDetails')]",
				"[concat(variables('factoryId'), '/pipelines/CK_SAV_Accounttransactions')]",
				"[concat(variables('factoryId'), '/pipelines/DebitCardDetails')]",
				"[concat(variables('factoryId'), '/pipelines/NextlyAccountlockout')]",
				"[concat(variables('factoryId'), '/pipelines/NextlyAccountRoles')]",
				"[concat(variables('factoryId'), '/pipelines/NextlyCrossAccounts')]",
				"[concat(variables('factoryId'), '/pipelines/NextlyLoanTransactions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ActivityLogsMonitorLogsCount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ActivityLogs count",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "Select count(1) from activityLogs with (NoLock)\n    WHERE  Cast(datetime as date) < Cast(getdate()-35 as date)",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_BusinessData_Source",
								"type": "DatasetReference",
								"parameters": {
									"SourceDB": "SCCU_Businessdata_PROD",
									"SourceTable": "activityLogs",
									"SourceSchema": "dbo"
								}
							}
						}
					},
					{
						"name": "ActivityMonitorLogs count",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "Select count(1) from businessdata.activityLogs with (NoLock)\n    WHERE  Cast(CreatedDateas date) <= Cast(getdate()-60 as date)",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_BusinessData_Source",
								"type": "DatasetReference",
								"parameters": {
									"SourceDB": "SCCU_Businessdata_PROD",
									"SourceTable": "activityLogs",
									"SourceSchema": "dbo"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/MISC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_BusinessData_Source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ActivityLogsToArchive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy ActivityLogs To Archive 11th day",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "Select * from activityLogs with (NoLock)\n    WHERE  Cast(datetime as date) <= Cast(getdate()-11 as date) ",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ActivityLogsSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Archive_Destination",
								"type": "DatasetReference",
								"parameters": {
									"DestinationTable": "ActivityLogs",
									"DestinationSchema": "BusinessData"
								}
							}
						]
					},
					{
						"name": "Copy MemberActivityLogs To Archive 11th day",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "Select * from MemberActivityLog with (NoLock)\n    WHERE  Cast(CreatedDate as date) <= Cast(getdate()-11 as date) ",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ActivityLogsSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Archive_Destination",
								"type": "DatasetReference",
								"parameters": {
									"DestinationTable": "MemberActivityLog",
									"DestinationSchema": "BusinessData"
								}
							}
						]
					},
					{
						"name": "ActivityLogs Delete 11th day",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy ActivityLogs To Archive 11th day",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "DECLARE @BatchSize INT = 10000;\nDECLARE @RowsAffected INT;\n \n \nWHILE 1 = 1\nBEGIN\n    DELETE TOP (@BatchSize)\n    FROM activityLogs  with (RowLock)\n    WHERE  Cast(datetime as date) <= Cast(getdate()-11 as date)\n    \n    SET @RowsAffected = @@ROWCOUNT; \n    \n\tWAITFOR DELAY '00:00:01';\n    IF @RowsAffected = 0\n        BREAK; \nEND\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "MemberActivityLogs Delete 11th day",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy MemberActivityLogs To Archive 11th day",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "DECLARE @BatchSize INT = 10000;\nDECLARE @RowsAffected INT;\n \n \nWHILE 1 = 1\nBEGIN\n    DELETE TOP (@BatchSize)\n    FROM MemberActivityLog  with (RowLock)\n    WHERE  Cast(CreatedDate as date) <= Cast(getdate()-11 as date)\n    \n    SET @RowsAffected = @@ROWCOUNT; \n    \n\tWAITFOR DELAY '00:00:01';\n    IF @RowsAffected = 0\n        BREAK; \nEND\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/MISC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ActivityLogsSource')]",
				"[concat(variables('factoryId'), '/datasets/Archive_Destination')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ActivityLogs_MonitorLogs_Count')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ActivityLogs count",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "Select count(1) from activityLogs with (NoLock)\n    WHERE  Cast(datetime as date) <= Cast(getdate()-45 as date)",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_BusinessData_Source",
								"type": "DatasetReference",
								"parameters": {
									"SourceDB": "SCCU_Businessdata_PROD",
									"SourceTable": "activityLogs",
									"SourceSchema": "dbo"
								}
							}
						}
					},
					{
						"name": "ActivityMonitorLogs count",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "Select count(1) from Adaptive.ActivityMonitorLog with (NoLock)\n    WHERE  Cast(CreatedDate as date) < Cast(getdate()-60 as date)",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_BusinessData_Source",
								"type": "DatasetReference",
								"parameters": {
									"SourceDB": "SCCU_Businessdata_PROD",
									"SourceTable": "ActivityMonitorLog",
									"SourceSchema": "Adaptive"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/MISC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_BusinessData_Source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BacPac ActivityLog_Weekly')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ActivityLog Weekly Notification",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Generic_StoredProcedure_Emails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"procName": {
									"value": "sp_Bacpac_GetEmailData_WeeklyActivityLogs",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/BacPac"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Generic_StoredProcedure_Emails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BacPac Tables ACISeri_CheckFree_Vsofts_WeeklyTwice')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "sp_Bacpac_BackUp_ACISeri_CheckFree_Vsoft",
				"activities": [
					{
						"name": "sp_Bacpac_BackUp_ACISeri_CheckFree_Vsoft",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_Bacpac_BackUp_ACISeri_CheckFree_Vsoft]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_Bacpac_Delete_ACISeri_CheckFree_Vsoft",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_Bacpac_DeleteTable_ACISeri_CheckFree_Vsoft]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "BacPac_ACISeri_Notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_Bacpac_BackUp_ACISeri_CheckFree_Vsoft",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sp_Bacpac_Delete_ACISeri_CheckFree_Vsoft",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BacPac_Emails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"procName": "sp_Bacpac_GetEmailData_WeeklyTwice_AscSeri"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/BacPac"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Logdb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/pipelines/BacPac_Emails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BacPac Tables Daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExternalRequestTxs_BacPac",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_Bacpac_BackUpTables]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_Bacpac_BackUp_NextlyCoreLog",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExternalRequestTxs_BacPac",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_Bacpac_BackUp_NextlyCoreLog]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete ExternalRequestTxs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Bacpac_BackUp_NextlyCoreLog",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_Bacpac_DeleteBackUpTables]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete NextlyCoreLog",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete ExternalRequestTxs",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_Bacpac_Delete_NextlyCoreLog]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "BacPacDaily_Notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete NextlyCoreLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BacPac_Emails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"procName": "sp_Bacpac_GetEmailData_Daily"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/BacPac"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Logdb_PROD')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Logdb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/pipelines/BacPac_Emails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BacPac Tables Log_LogTables_WeeklyTwice')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "[[dbo].[sp_Bacpac_BackUp_Log_LogTables_WeeklyTwice]",
				"activities": [
					{
						"name": "sp_Bacpac_BackUp_Log_LogTables_WeeklyTwice",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_Bacpac_BackUp_Log_LogTables_WeeklyTwice]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_Bacpac_Delete_Log_LogTables_WeeklyTwice",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_Bacpac_Delete_Log_LogTables_WeeklyTwice]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "BacPacLog_Notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_Bacpac_BackUp_Log_LogTables_WeeklyTwice",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sp_Bacpac_Delete_Log_LogTables_WeeklyTwice",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BacPac_Emails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"procName": "sp_Bacpac_GetEmailData_WeeklyTwice_Log"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/BacPac"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Logdb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/pipelines/BacPac_Emails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BacPac_Emails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Getemail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendEmail_IT",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Subject": {
									"value": "@activity('Getemail').output.firstRow.Subject",
									"type": "Expression"
								},
								"Content": {
									"value": "@activity('Getemail').output.firstRow.EmailBody",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Getemail",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "EXEC @{pipeline().parameters.procName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "BacPac_Email_Proc",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"procName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetention/BacPac"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SendEmail_IT')]",
				"[concat(variables('factoryId'), '/datasets/BacPac_Email_Proc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BusinessData_Rebuild_ActivityLogs_Index')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Rebuild Index on ActivityLogs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex_ActivityLogs]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/Indexing"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BusinessData_Rebuild_ActivityLogs_Stat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Rebuild Stat on ActivityLogs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_Rebuild_Statistics_ActivityLogs]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/Indexing"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BusinessData_Rebuild_Index')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BusinessData_RebuildIndex_LT50K",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex_LT50K]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "BusinessData_RebuildIndex_50Kto100K",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "BusinessData_RebuildIndex_LT50K",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex_LT100K]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "BusinessData_RebuildIndex_GT100K",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "BusinessData_RebuildIndex_50Kto100K",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex_GT100K]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/Indexing"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BusinessData_Rebuild_Stat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update Statistics",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_UpdateStatistics]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/Indexing"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCM_CreditCard_AccountDetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CCM_CreditCard_AccountDetails_CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CCM_CreditCard_AccountDetails_StagingTruncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/CCM_CreditCard_AccountDetails",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DNA_Member_Number",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DNA_Member_Number",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CCM_Account_Number",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CCM_Account_Number",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Open_Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Open_Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Current_Account_Balance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Current_Account_Balance",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "Next_Payment_Due_Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Next_Payment_Due_Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Next_Payment_Amt_Due",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Next_Payment_Amt_Due",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "Current_Year_Interest_Paid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Current_Year_Interest_Paid",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "Prior_Year_Interest_Paid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Prior_Year_Interest_Paid",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "Interest_Rate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Interest_Rate",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 5
										}
									},
									{
										"source": {
											"name": "APR_Interest_Class",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "APR_Interest_Class",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Account_Payoff_Balance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Account_Payoff_Balance",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "Account_Principal_Balance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Account_Principal_Balance",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "Amount_To_Pay_Current",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Amount_To_Pay_Current",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "Total_Amount_Currently_Due",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Total_Amount_Currently_Due",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "Account_Credit_Limit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Account_Credit_Limit",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "Total_Per_Diem",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Total_Per_Diem",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "Current_Term",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Current_Term",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Remaining_Payments",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Remaining_Payments",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Payment_Calculation_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Payment_Calculation_Period",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Available_Credit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Available_Credit",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "Amount_Past_Due",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Amount_Past_Due",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OfflinSource_CCM_CreditCard_AccountDetails",
								"type": "DatasetReference",
								"parameters": {
									"CCM_CreditCard_AccountDetails": " @pipeline().parameters.FileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OfflineDestination_CCM_CreditCard_AccountDetails",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CCM_CreditCard_AccountDetails_StagingTruncate",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE CCM_CreditCard_AccountDetails_Staging"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CCM_CreditCard_AccountDetails_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Spi_InsertToCreditCardAccountBalanceInfo]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/CCM_CreditCard_AccountDetails",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Completed_CCM_CreditCard_AccountDetails_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Completed_CCM_CreditCard_AccountDetails_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "Nextly CCM Credit Card Account Details*.csv"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "offline-services/PROD/CCM_CreditCard_AccountDetails"
					}
				},
				"folder": {
					"name": "OfflineServices"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OfflinSource_CCM_CreditCard_AccountDetails')]",
				"[concat(variables('factoryId'), '/datasets/OfflineDestination_CCM_CreditCard_AccountDetails')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Completed_CCM_CreditCard_AccountDetails_Source')]",
				"[concat(variables('factoryId'), '/datasets/Completed_CCM_CreditCard_AccountDetails_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CK_SAV_Accounttransactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CK_SAV_Accounttransactions_CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CK_SAV_Accounttransactions_StagingTruncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/CK_SAV_Accounttransactions",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ACCOUNT_NUMBER",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCOUNT_NUMBER",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_NUMBER",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_NUMBER",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_POSTING_DATE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_POSTING_DATE",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "RTXN_ACTIVITY_DATE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_ACTIVITY_DATE",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "DEBIT_CREDIT_FLAG",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEBIT_CREDIT_FLAG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_STATUS_CODE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_STATUS_CODE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_STATUS_DESCRIPTION",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_STATUS_DESCRIPTION",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_TYPE_CODE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_TYPE_CODE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_DESCRIPTION",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_DESCRIPTION",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_AMOUNT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_AMOUNT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "EXTERNAL_RTXN_DESCNBR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EXTERNAL_RTXN_DESCNBR",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EXTERNAL_RTXN_DESCTEXT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EXTERNAL_RTXN_DESCTEXT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "INTERNAL_RTXN_DESCNBR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "INTERNAL_RTXN_DESCNBR",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "INTERNAL_RTXN_DESCTEXT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "INTERNAL_RTXN_DESCTEXT",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OfflinSource_CK_SAV_Accounttransactions",
								"type": "DatasetReference",
								"parameters": {
									"CK_SAV_Accounttransactionsons_Staging": "@pipeline().parameters.FileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OfflineDestination_CK_SAV_Accounttransactions",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CK_SAV_Accounttransactions_StagingTruncate",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE [dbo].[CK_SAV_Accounttransactions_Staging]"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CK_SAV_Accounttransactions_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Spi_InsertToAccountTransactionsDetails]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "completed copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/CK_SAV_Accounttransactions",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Completed_CK_SAV_Accounttransactions_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Completed_CK_SAV_Accounttransactions_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Deposit Archival",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "completed copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DepositTransaction_Archival",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "Nextly CK SAV TD Transactions Prior 15 Days*.csv"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "offline-services/PROD/CK_SAV_Accounttransactions"
					}
				},
				"folder": {
					"name": "OfflineServices"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OfflinSource_CK_SAV_Accounttransactions')]",
				"[concat(variables('factoryId'), '/datasets/OfflineDestination_CK_SAV_Accounttransactions')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Completed_CK_SAV_Accounttransactions_Source')]",
				"[concat(variables('factoryId'), '/datasets/Completed_CK_SAV_Accounttransactions_Sink')]",
				"[concat(variables('factoryId'), '/pipelines/DepositTransaction_Archival')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DebitCardDetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DebitCardDetails_CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DebitCardDetails_StagingTruncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/DebitCardDetails",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ExternalCardNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ExternalCardNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FullName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FullName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "IssueDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "IssueDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "ExpireDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ExpireDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "AgreementTypeCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AgreementTypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentStatusCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentStatusCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PrimarySavingsAccountNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PrimarySavingsAccountNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PrimaryCheckingAccountNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PrimaryCheckingAccountNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AgreementNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AgreementNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RoleEntityNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RoleEntityNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OwnerPersonNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OwnerPersonNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OwnerOrganizationNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OwnerOrganizationNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OfflinSource_DebitCardDetails",
								"type": "DatasetReference",
								"parameters": {
									"DebitCardDetails": "@pipeline().parameters.FileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OfflineDestination_DebitCardDetails",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DebitCardDetails_StagingTruncate",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE [dbo].[DebitCardDetails_Staging]"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DebitCardDetails_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Spi_InsertInToMemberDebitCardDetails]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "completed copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/DebitCardDetails",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Completed_DebitCardDetails_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Completed_DebitCardDetails_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "NextlyDebitCards*.csv"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "offline-services/PROD/DebitCardDetails"
					}
				},
				"folder": {
					"name": "OfflineServices"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OfflinSource_DebitCardDetails')]",
				"[concat(variables('factoryId'), '/datasets/OfflineDestination_DebitCardDetails')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Completed_DebitCardDetails_Source')]",
				"[concat(variables('factoryId'), '/datasets/Completed_DebitCardDetails_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DepositTransaction_Archival')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AccountTransactions_Copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM [dbo].[AccountTransactionsDetails] \n\tWHERE \n\t\t[PostingDate] <DATEADD(DAY,-15,CAST(GETUTCDATE() AS DATE));",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "ObjectGUID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ObjectGUID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountNumber",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "AccountNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "RTXNNumber",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "RTXNNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "PostingDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "PostingDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "ActivityDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "ActivityDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "DebitCreditFlag",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DebitCreditFlag",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Statuscode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Statuscode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "StatusDescription",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "StatusDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXNTypecode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RTXNTypecode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXNTypeDescription",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RTXNTypeDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Amount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Amount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "ExternalRTXNDescText",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ExternalRTXNDescText",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "InternalRTXNDescText",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "InternalRTXNDescText",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Source_Offline_AccountTransactionsDetails",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_Offline_AccountTransactionsDetails",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "AccountTransactionsDelete_Script",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "AccountTransactions_Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "DECLARE @BatchSize INT = 10000; \nDECLARE @RowsAffected INT = 1; \nDECLARE @TotalDeletedRows INT = 0; \n\nWHILE (@RowsAffected > 0)\nBEGIN\n    DELETE TOP (@BatchSize)\n    FROM \n        [dbo].[AccountTransactionsDetails]\n    WHERE \n        [PostingDate]  < DATEADD(DAY, -15, CAST(GETUTCDATE() AS DATE));\n\n    SET @RowsAffected = @@ROWCOUNT; \n    SET @TotalDeletedRows = @TotalDeletedRows + @RowsAffected;\nEND\n\n\nSELECT @TotalDeletedRows AS TotalDeletedRows;\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Purge_Script",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "AccountTransactionsDelete_Script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Archivedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "DECLARE @BatchSize INT = 10000; \nDECLARE @RowsAffected INT = 1; \nDECLARE @TotalDeletedRows INT = 0; \n\nWHILE (@RowsAffected > 0)\nBEGIN\n    DELETE TOP (@BatchSize)\n   FROM \n\t\t[Offline].[AccountTransactionsDetails] \n\tWHERE \n\t\t[PostingDate] < DATEADD(DAY,-47,CAST(GETUTCDATE() AS DATE));\n\n    SET @RowsAffected = @@ROWCOUNT; \n    SET @TotalDeletedRows = @TotalDeletedRows + @RowsAffected;\nEND\n\n\nSELECT @TotalDeletedRows AS TotalDeletedRows;\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OfflineServices/Offline_Archival"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Offline_AccountTransactionsDetails')]",
				"[concat(variables('factoryId'), '/datasets/Destination_Offline_AccountTransactionsDetails')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Generic_SendEmail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline email notification on job completion",
				"activities": [
					{
						"name": "GetSendGridAPIKey",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@concat('https://sccu-keyvault.vault.azure.net/secrets/SCCUSendGridAPI-PROD?api-version=7.0')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SendEmailNotification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetSendGridAPIKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ', activity('GetSendGridAPIKey').output.value)",
									"type": "Expression"
								},
								"Content-Type": "application/json"
							},
							"url": "https://api.sendgrid.com/v3/mail/send",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "{\"personalizations\":[{\"to\":[{\"email\":\"SCCUADFNotifications@claysys.com\"}]}],\"from\":{\"email\":\"@{pipeline().globalParameters.FromEmail}\"},\"subject\":\"@{pipeline().parameters.Subject}\",\"content\":[{\"type\":\"text/html\",\"value\":\"@{pipeline().parameters.Content}\"}],\"headers\": {\n    \"Priority\": \"@{pipeline().parameters.Importance}\",\n    \"Importance\": \"@{pipeline().parameters.Importance}\",\n    \"X-Priority\": \"@{if(equals(pipeline().parameters.Importance, 'High'), '1', '2')}\"\n  }}}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Subject": {
						"type": "string",
						"defaultValue": "test sub"
					},
					"Content": {
						"type": "string",
						"defaultValue": "Teest ema"
					},
					"Importance": {
						"type": "string",
						"defaultValue": "Normal"
					}
				},
				"folder": {
					"name": "DataRetention/MISC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Generic_StoredProcedure_Emails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Getemail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Generic_SendEmail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Subject": {
									"value": "@activity('Getemail').output.firstRow.Subject",
									"type": "Expression"
								},
								"Content": {
									"value": "@activity('Getemail').output.firstRow.EmailBody",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Getemail",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "EXEC @{pipeline().parameters.procName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "BacPac_Email_Proc",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"procName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetention/BacPac"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Generic_SendEmail')]",
				"[concat(variables('factoryId'), '/datasets/BacPac_Email_Proc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoanTransaction_Archival')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoanTransactions",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * \tFROM [dbo].[LoanTransactionsDetails] \n\tWHERE \n\t\t[PostingDate]  <DATEADD(DAY,-15,CAST(GETUTCDATE() AS DATE));",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "ObjectGUID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ObjectGUID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountNumber",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "AccountNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "RTXNNumber",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "RTXNNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "PostingDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "PostingDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "ActivityDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "ActivityDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "DebitCreditFlag",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DebitCreditFlag",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Statuscode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Statuscode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "StatusDescription",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "StatusDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXNTypecode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RTXNTypecode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXNTypeDescription",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RTXNTypeDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Amount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Amount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "ExternalRTXNDescText",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ExternalRTXNDescText",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "InternalRTXNDescText",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "InternalRTXNDescText",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Source_Offline_LoanTransactionsDetails",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_Offline_LoanTransactionsDetails",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "AccountTransactionsDelete_Script",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "LoanTransactions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "DECLARE @BatchSize INT = 10000; \nDECLARE @RowsAffected INT = 1; \nDECLARE @TotalDeletedRows INT = 0; \n\nWHILE (@RowsAffected > 0)\nBEGIN\n    DELETE \n\tFROM \n\t\t[dbo].[LoanTransactionsDetails]\n\tWHERE \n\t\t[PostingDate]  < DATEADD(DAY,-15,CAST(GETUTCDATE() AS DATE));\n\n    SET @RowsAffected = @@ROWCOUNT; \n    SET @TotalDeletedRows = @TotalDeletedRows + @RowsAffected;\nEND\n\n\nSELECT @TotalDeletedRows AS TotalDeletedRows;\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Purge_Script",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "AccountTransactionsDelete_Script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Archivedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "DECLARE @BatchSize INT = 10000; \nDECLARE @RowsAffected INT = 1; \nDECLARE @TotalDeletedRows INT = 0; \n\nWHILE (@RowsAffected > 0)\nBEGIN\n    DELETE \n\tFROM \n\t\t[Offline].[LoanTransactionsDetails]\n\tWHERE \n\t\t[PostingDate] < DATEADD(DAY,-47,CAST(GETUTCDATE() AS DATE));\n\n    SET @RowsAffected = @@ROWCOUNT; \n    SET @TotalDeletedRows = @TotalDeletedRows + @RowsAffected;\nEND\n\nSELECT @TotalDeletedRows AS TotalDeletedRows;\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OfflineServices/Offline_Archival"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Offline_LoanTransactionsDetails')]",
				"[concat(variables('factoryId'), '/datasets/Destination_Offline_LoanTransactionsDetails')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MemberDataDetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MemberDataDetails_CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MemberDataDetails_StagingTruncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/MemberDataDetails",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MemberNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MemberNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OwnerPersonNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OwnerPersonNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OwnerOrganizationNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OwnerOrganizationNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AgreementNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AgreementNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AgreementType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AgreementType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OrgName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrgName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OrgTypeDescription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrgTypeDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AddressUseCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AddressUseCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AddressLineText",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AddressLineText",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CityName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CityName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ZipCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ZipCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "StateCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "StateCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CountryCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CountryCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CountryName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CountryName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Email",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Email",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EmailTypeCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmailTypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EmailTypeDescription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmailTypeDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "HomePhone",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "HomePhone",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "HomePhoneUseCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "HomePhoneUseCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CellPhone",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CellPhone",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CellPhoneUseCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CellPhoneUseCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BusinessPhone",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BusinessPhone",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BusinessPhoneUseCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BusinessPhoneUseCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OrgTaxIds",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrgTaxIds",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PersonTaxId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PersonTaxId",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ShareAccountNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ShareAccountNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DateOfBirth",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DateOfBirth",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "MemberDateLastContact",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MemeberDateLastContact",
											"type": "DateTime",
											"physicalType": "date"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OfflinSource_MemberDataDetails",
								"type": "DatasetReference",
								"parameters": {
									"MemberDataDetails": "@pipeline().parameters.FileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OfflineDestination_MemberDataDetails",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "MemberDataDetails_StagingTruncate",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE [dbo].[MemberDataDetails_Staging]"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "MemberDataDetails_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "Spi_InsertIntoMembersOffline"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "completed copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/MemberDataDetails",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Completed_MemberDataDetails_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Completed_MemberDataDetails_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "NextlyMemberData*.csv"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "offline-services/PROD/MemberDataDetails"
					}
				},
				"folder": {
					"name": "OfflineServices"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OfflinSource_MemberDataDetails')]",
				"[concat(variables('factoryId'), '/datasets/OfflineDestination_MemberDataDetails')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Completed_MemberDataDetails_Source')]",
				"[concat(variables('factoryId'), '/datasets/Completed_MemberDataDetails_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NextlyAccountDetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NextlyAccountDetails_Staging_CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NextlyAccountDetails_Staging Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/NextlyAccountDetails",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AccountNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "OpenDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OpenDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountDateLastContact",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountDateLastContact",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentAccountStatusCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentAccountStatusCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentAccountStatusDesc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentAccountStatusDesc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountOwnershipCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountOwnershipCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountOwnershipDesc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountOwnershipDesc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MajorAccountTypeCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MajorAccountTypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MinorAccountTypeCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MinorAccountTypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MinorAccountTypeDescription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MinorAccountTypeDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ProductFullName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ProductFullName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountNickName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountNickName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentBalance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentBalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BalanceCategoryCodeEscrow",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BalanceCategoryCodeEscrow",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentBalanceEscrow",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentBalanceEscrow",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BalanceCategoryCodeUnapplied",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BalanceCategoryCodeUnapplied",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentBalanceUnapplied",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentBalanceUnapplied",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BalanceCategoryCodeLIP",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BalanceCategoryCodeLIP",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentLIPBalance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentLIPBalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "NextPaymentDueDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NextPaymentDueDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentDueDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentDueDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastPaymentDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastPaymentDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastPaymentAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastPaymentAmount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LoanYTDInterestPaid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanYTDInterestPaid",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RegularPaymentAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RegularPaymentAmount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LoanInterestRate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanInterestRate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LoanPriorYTDInterestPaid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanPriorYTDInterestPaid",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PayoffBalance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PayoffBalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PayDownBalance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PayDownBalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PrincipalBalance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PrincipalBalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AmountToPayCurrent",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AmountToPayCurrent",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TotalPerDiem",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalPerDiem",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TotalAmountCurrentlyDue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalAmountCurrentlyDue",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AmountPastDue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AmountPastDue",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OriginalLoanAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OriginalLoanAmount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LoanCurrentTerm",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanCurrentTerm",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LoanRemainingTerm",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanRemainingTerm",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RemainingPayments",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RemainingPayments",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PaymentCalculationPeriod",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PaymentCalculationPeriod",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreditLimitAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CreditLimitAmount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AvailableCredit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AvailableCredit",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DepositInterestRate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositInterestRate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DepositPriorYTDInterestPaid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositPriorYTDInterestPaid",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DepositYTDInterestPaid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositYTDInterestPaid",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DepositLastInterestAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositLastInterestAmount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DepositLastInterestPostDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositLastInterestPostDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DepositCurrentTerm",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositCurrentTerm",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MaturityDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MaturityDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OwnerPersonNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OwnerPersonNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OwnerOrganizationNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OwnerOrganizationNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MemberNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MemberNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AgreementNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AgreementNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OfflinSource_NextlyAccountDetails",
								"type": "DatasetReference",
								"parameters": {
									"NextlyAccountDetails": "@pipeline().parameters.FileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OfflineDestination_NextlyAccountDetails",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "NextlyAccountDetails_Staging Truncate",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE StagingTable_AccountDetails"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "NextlyAccountDetails_Staging_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Spi_InsertIntoAccountDetails]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/NextlyAccountDetails",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Completed_NextlyAccountDetails_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Completed_NextlyAccountDetails_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "NextlyAccounts*.csv"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "offline-services/DEV/NextlyAccountDetails"
					}
				},
				"folder": {
					"name": "OfflineServices"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OfflinSource_NextlyAccountDetails')]",
				"[concat(variables('factoryId'), '/datasets/OfflineDestination_NextlyAccountDetails')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Completed_NextlyAccountDetails_Source')]",
				"[concat(variables('factoryId'), '/datasets/Completed_NextlyAccountDetails_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NextlyAccountRoles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NextlyAccountRoles_CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NextlyAccountRoles_StagingTruncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/NextlyAccountRoles",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AccountNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RoleEntityNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RoleEntityNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RoleEntityTypeCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RoleEntityTypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RoleCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RoleCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RoleDescription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RoleDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MemberName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MemberName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OfflinSource_NextlyAccountRoles",
								"type": "DatasetReference",
								"parameters": {
									"NextlyAccountRoles": "@pipeline().parameters.FileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OfflineDestination_NextlyAccountRoles",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "NextlyAccountRoles_StagingTruncate",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE NextlyAccountRoles_Staging"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "NextlyAccountRoles_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "Spi_InsertToMemberRolesDetails"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/NextlyAccountRoles",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Completed_NextlyAccountRoles_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Completed_NextlyAccountRoles_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "NextlyAccountRoles*.csv"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "offline-services/PROD/NextlyAccountRoles"
					}
				},
				"folder": {
					"name": "OfflineServices"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OfflinSource_NextlyAccountRoles')]",
				"[concat(variables('factoryId'), '/datasets/OfflineDestination_NextlyAccountRoles')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Completed_NextlyAccountRoles_Source')]",
				"[concat(variables('factoryId'), '/datasets/Completed_NextlyAccountRoles_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NextlyAccountlockout')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NextlyAccountlockout_Staging_CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NextlyAccountlockout_StagingTruncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/NextlyAccountlockout",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AccountNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "LockoutFlagCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LockoutFlagCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LockoutFlagDescription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LockoutFlagDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "InactiveDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "InactiveDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OfflinSource_NextlyAccountlockout",
								"type": "DatasetReference",
								"parameters": {
									"NextlyAccountlockout": "@pipeline().parameters.FileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OfflineDestination_NextlyAccountlockout",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "NextlyAccountlockout_StagingTruncate",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE NextlyAccountlockout_Staging"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "NextlyAccountlockout_Staging_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "Spi_InsertToMemberLockOutFlagDetails"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/NextlyAccountlockout",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Completed_NextlyAccountlockout_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Completed_NextlyAccountlockout_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "NextlyAccountLockout*.csv"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "offline-services/PROD/NextlyAccountlockout"
					}
				},
				"folder": {
					"name": "OfflineServices"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OfflinSource_NextlyAccountlockout')]",
				"[concat(variables('factoryId'), '/datasets/OfflineDestination_NextlyAccountlockout')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Completed_NextlyAccountlockout_Source')]",
				"[concat(variables('factoryId'), '/datasets/Completed_NextlyAccountlockout_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NextlyCrossAccounts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NextlyCrossAccounts_CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NextlyCrossAccounst_StagingTruncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/CrossAccounts",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AccountNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "AllowCrossAcctXferYN",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AllowCrossAcctXferYN",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OpenDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OpenDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "AccountDateLastContact",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountDateLastContact",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CurrentAccountStatusCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentAccountStatusCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentAccountStatusDesc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentAccountStatusDesc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountOwnershipCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountOwnershipCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountOwnershipDesc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountOwnershipDesc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MajorAccountTypeCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MajorAccountTypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MinorAccountTypeCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MinorAccountTypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MinorAccountTypeDescription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MinorAccountTypeDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ProductFullName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ProductFullName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountNickName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountNickName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentBalance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentBalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BalanceCategoryCodeEscrow",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BalanceCategoryCodeEscrow",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentBalanceEscrow",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentBalanceEscrow",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BalanceCategoryCodeUnapplied",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BalanceCategoryCodeUnapplied",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentBalanceUnapplied",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentBalanceUnapplied",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BalanceCategoryCodeLIP",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BalanceCategoryCodeLIP",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CurrentLIPBalance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentLIPBalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "NextPaymentDueDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NextPaymentDueDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CurrentDueDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CurrentDueDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "LastPaymentDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastPaymentDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "LastPaymentAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastPaymentAmount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LoanYTDInterestPaid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanYTDInterestPaid",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RegularPaymentAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RegularPaymentAmount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LoanInterestRate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanInterestRate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LoanPriorYTDInterestPaid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanPriorYTDInterestPaid",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PayoffBalance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PayoffBalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PayDownBalance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PayDownBalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PrincipalBalance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PrincipalBalance",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AmountToPayCurrent",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AmountToPayCurrent",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TotalPerDiem",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalPerDiem",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TotalAmountCurrentlyDue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalAmountCurrentlyDue",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AmountPastDue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AmountPastDue",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OriginalLoanAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OriginalLoanAmount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LoanCurrentTerm",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanCurrentTerm",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LoanRemainingTerm",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanRemainingTerm",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RemainingPayments",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RemainingPayments",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PaymentCalculationPeriod",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PaymentCalculationPeriod",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreditLimitAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CreditLimitAmount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AvailableCredit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AvailableCredit",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DepositInterestRate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositInterestRate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DepositPriorYTDInterestPaid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositPriorYTDInterestPaid",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DepositYTDInterestPaid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositYTDInterestPaid",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DepositLastInterestAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositLastInterestAmount",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DepositLastInterestPostDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositLastInterestPostDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "DepositCurrentTerm",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DepositCurrentTerm",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MaturityDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MaturityDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "AccountType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PersonNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PersonNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "CrossAcctAgreementNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CrossAcctAgreementNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "CrossAcctMemberNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CrossAcctMemberNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "OwnerPersonNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OwnerPersonNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "OwnerOrganizationNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OwnerOrganizationNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "OwnerMemberNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OwnerMemberNumber",
											"type": "Int64",
											"physicalType": "bigint"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OfflinSource_NextlyCrossAccounts",
								"type": "DatasetReference",
								"parameters": {
									"CrossAccounts": "@pipeline().parameters.FileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OfflineDestination_NextlyCrossAccounts",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "NextlyCrossAccounst_StagingTruncate",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE NextlyCrossAccounts_Staging"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "NextlyCrossAccounts_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Spi_InsertIntoMemberCrossAccounts]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "completed copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/CrossAccounts",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Completed_CrossAccounts_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Completed_CrossAccounts_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "NextlyCrossAccounts*.csv"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "offline-services/PROD/CrossAccounts"
					}
				},
				"folder": {
					"name": "OfflineServices"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OfflinSource_NextlyCrossAccounts')]",
				"[concat(variables('factoryId'), '/datasets/OfflineDestination_NextlyCrossAccounts')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Completed_CrossAccounts_Source')]",
				"[concat(variables('factoryId'), '/datasets/Completed_CrossAccounts_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NextlyLoanTransactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NextlyLoanTransactions_CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NextlyLoanTransactions_StagingTruncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/NextlyLoanTransactions",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "SCCU_DataFactory_Storage",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ACCOUNT_NUMBER",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCOUNT_NUMBER",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_NUMBER",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_NUMBER",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_POSTING_DATE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_POSTING_DATE",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "RTXN_ACTIVITY_DATE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_ACTIVITY_DATE",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "DEBIT_CREDIT_FLAG",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEBIT_CREDIT_FLAG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_STATUS_CODE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_STATUS_CODE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_STATUS_DESCRIPTION",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_STATUS_DESCRIPTION",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_TYPE_CODE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_TYPE_CODE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_DESCRIPTION",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_DESCRIPTION",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RTXN_AMOUNT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RTXN_AMOUNT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "EXTERNAL_RTXN_DESCNBR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EXTERNAL_RTXN_DESCNBR",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EXTERNAL_RTXN_DESCTEXT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EXTERNAL_RTXN_DESCTEXT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "INTERNAL_RTXN_DESCNBR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "INTERNAL_RTXN_DESCNBR",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "INTERNAL_RTXN_DESCTEXT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "INTERNAL_RTXN_DESCTEXT",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OfflinSource_NExtlyLoanTransaction",
								"type": "DatasetReference",
								"parameters": {
									"NextlyLoanTransactions": "@pipeline().parameters.FileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OfflineDestination_NextlyLoanTransactions",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "NextlyLoanTransactions_StagingTruncate",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE NExtlyLoanTransactions_Staging"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "NextlyLoanTransactions_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Spi_InsertToLoanTransactionsDetails]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/NextlyLoanTransactions",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Completed_NextlyLoanTransactions_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Completed_NextlyLoanTransactions_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Loan Archival",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoanTransaction_Archival",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "Nextly Loan Account Transactions Prior 15 Days*.csv"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "offline-services/PROD/NextlyLoanTransactions"
					}
				},
				"folder": {
					"name": "OfflineServices"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OfflinSource_NExtlyLoanTransaction')]",
				"[concat(variables('factoryId'), '/datasets/OfflineDestination_NextlyLoanTransactions')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Completed_NextlyLoanTransactions_Source')]",
				"[concat(variables('factoryId'), '/datasets/Completed_NextlyLoanTransactions_Sink')]",
				"[concat(variables('factoryId'), '/pipelines/LoanTransaction_Archival')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nextly_LoanDueAlerts_PROD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExternalAlert_LoanDueStaging_Copy data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/LoanDueAlerts",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlMISink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SubscriptionID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriptionID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "DueDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DueDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "AmountDue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AmountDue",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Prod_LoanDueAlertsSourceDataset",
								"type": "DatasetReference",
								"parameters": {
									"TransactionFileName": " @pipeline().parameters.FileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Prod_LoanDueAlertsSinkDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "External_LoanAlertQueue_Stored procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExternalAlert_LoanDueStaging_Copy data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "spi_ExternalLoanALertQueue"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Truncate LoanDueAlerts staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Prod_LoanDueAlertsSourceDataset",
								"type": "DatasetReference",
								"parameters": {
									"TransactionFileName": " @pipeline().parameters.FileName"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "External_LoanAlertQueue_Stored procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/LoanDueAlerts",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "PROD_CompletedLoanDueAlertsSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_CompletedLoanDueAlertsSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate LoanDueAlerts staging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_Truncate_External_LoanDueAlertStaging"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "LoanDueAlerts10102024.txt"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "to-nextly/PROD/LoanDueAlerts"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Prod_LoanDueAlertsSourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/Prod_LoanDueAlertsSinkDataSet')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]",
				"[concat(variables('factoryId'), '/datasets/PROD_CompletedLoanDueAlertsSource')]",
				"[concat(variables('factoryId'), '/datasets/PROD_CompletedLoanDueAlertsSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nextly_ThresholdAlert_PROD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExternalAlert_ThresholdStaging_Copy data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "PROD/ThresholdAlerts",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName\n",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlMISink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SubscriptionID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriptionID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "BalanceAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BalanceAmount",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PROD_ThresholdSourceDataSet",
								"type": "DatasetReference",
								"parameters": {
									"ThresholdFilename": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_ThresholSinkDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExternalAlert_ThresholdStaging_Copy data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spi_ExtThresholdAlertToQueue]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Truncate Threshold staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "UAT_ThresholdSourceDataSet",
								"type": "DatasetReference",
								"parameters": {
									"ThresholdFilename": "@pipeline().parameters.FileName"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/ThresholdAlerts",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "PROD_CompletedThresholdSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_CompletedThresholdSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Threshold staging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_Truncate_ExternalAlert_ThresholdStaging]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					},
					"FilePath": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PROD_ThresholdSourceDataSet')]",
				"[concat(variables('factoryId'), '/datasets/PROD_ThresholSinkDataSet')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]",
				"[concat(variables('factoryId'), '/datasets/UAT_ThresholdSourceDataSet')]",
				"[concat(variables('factoryId'), '/datasets/PROD_CompletedThresholdSource')]",
				"[concat(variables('factoryId'), '/datasets/PROD_CompletedThresholdSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nextly_TransactionAlert_PROD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExternalAlert_ThresholdStaging_Copy data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/TransactionAlerts",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlMISink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SubscriptionID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriptionID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "EmailContent",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmailContent",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SMSContent",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SMSContent",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PROD_TransactionSourceDataset",
								"type": "DatasetReference",
								"parameters": {
									"TransactionFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PRODTransactionSinkDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExternalAlert_ThresholdStaging_Copy data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "spi_ExtTransactionAlertToQueue"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Truncate Transaction staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "PROD_TransactionSourceDataset",
								"type": "DatasetReference",
								"parameters": {
									"TransactionFileName": "@pipeline().parameters.FileName"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/TransactionAlerts",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "PROD_CompletedTransactionSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_CompletedTransactionSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Transaction staging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_Truncate_ExternalAlert_TransactionStaging"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					},
					"FilePath": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PROD_TransactionSourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/PRODTransactionSinkDataSet')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]",
				"[concat(variables('factoryId'), '/datasets/PROD_CompletedTransactionSource')]",
				"[concat(variables('factoryId'), '/datasets/PROD_CompletedTransactionSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_DynamicRetention_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline has activities which archive/purge data from souce DB's to Archive DB ",
				"activities": [
					{
						"name": "Distinct DB",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "BacPac Tables Daily",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DISTINCT DestinationSchemaName FROM MasterConfig \r\nWHERE ( IsArchiveEnabled=1 OR IsPurgeEnabled=1 ) and \r\nDestinationSchemaName <> 'BusinessData'\r\nUNION \r\nSELECT 'BusinessData' as DestinationSchemaName",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Schemas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Distinct DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Distinct DB').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 1,
							"activities": [
								{
									"name": "DbNameSwitch",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().DestinationSchemaName",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "MetaDb",
												"activities": [
													{
														"name": "Meta DB",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SCCUPROD_MetaDB_DynamicRetention",
																"type": "PipelineReference"
															},
															"waitOnCompletion": false,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "LogDb",
												"activities": [
													{
														"name": "Log DB",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SCCUPROD_LogDB_DynamicRetention",
																"type": "PipelineReference"
															},
															"waitOnCompletion": false,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "BusinessData",
												"activities": [
													{
														"name": "BusinessData",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SCCUPROD_BusinessData_DynamicRetention",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "BBAlerts",
												"activities": [
													{
														"name": "BBAlerts",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SCCUPROD_BBAlerts_DynamicRetention",
																"type": "PipelineReference"
															},
															"waitOnCompletion": false,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "AdminLogDb",
												"activities": [
													{
														"name": "AdminLogDb",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SCCUPROD_Admin_LogDB_DynamicRetention",
																"type": "PipelineReference"
															},
															"waitOnCompletion": false,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "AdminMetaDb",
												"activities": [
													{
														"name": "AdminMetaDb",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SCCUPROD_Admin_MetaDB_DynamicRetention",
																"type": "PipelineReference"
															},
															"waitOnCompletion": false,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "AnonymousLogDb",
												"activities": [
													{
														"name": "AnonymousLogDb",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SCCUPROD_Anonymous_LogDB_DynamicRetention",
																"type": "PipelineReference"
															},
															"waitOnCompletion": false,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "AnonymousMetaDb",
												"activities": [
													{
														"name": "AnonymousMetaDb",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SCCUPROD_Anonymous_MetaDB_DynamicRetention",
																"type": "PipelineReference"
															},
															"waitOnCompletion": false,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "LogDBMI",
												"activities": [
													{
														"name": "SCCUPROD_LogDBMI_DynamicRetention",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SCCUPROD_LogDBMI_DynamicRetention",
																"type": "PipelineReference"
															},
															"waitOnCompletion": false,
															"parameters": {}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "BacPac Tables Daily",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BacPac Tables Daily",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/pipelines/BacPac Tables Daily')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_MetaDB_DynamicRetention')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_LogDB_DynamicRetention')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_BusinessData_DynamicRetention')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_BBAlerts_DynamicRetention')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_Admin_LogDB_DynamicRetention')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_Admin_MetaDB_DynamicRetention')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_Anonymous_LogDB_DynamicRetention')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_Anonymous_MetaDB_DynamicRetention')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_LogDBMI_DynamicRetention')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PendingIndexCount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pending Index count",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "SELECT count(1)\nFROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL, NULL, NULL) AS DDIPS\nINNER JOIN sys.tables T on T.object_id = DDIPS.object_id\nINNER JOIN sys.schemas S on T.schema_id = S.schema_id\nINNER JOIN sys.indexes I ON I.object_id = DDIPS.object_id\nAND DDIPS.index_id = I.index_id\nWHERE DDIPS.database_id = DB_ID()\nand I.name is not null\nand T.name NOT LIKE '%staging%' and T.name NOT LIKE '%archi%' and T.name NOT LIKE '%exceptio%' \nand t.name not in( 'CheckfreeApiSerilog','NextlyThirdPartyLog','ACISeriLogs2','VerafinSeriLogs', 'PayrailzApiSerilog','SccuBeta_ErrorLog')\n--and t.name = 'LoginHistory'\nAND DDIPS.avg_fragmentation_in_percent > 30\nAND DDIPS.page_count>50000",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_BusinessData_Source",
								"type": "DatasetReference",
								"parameters": {
									"SourceDB": "SCCU_Businessdata_PROD",
									"SourceTable": "activityLogs",
									"SourceSchema": "dbo"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/MISC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_BusinessData_Source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PurgeOldData_ActivityMonitorLog')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PurgeActivityMonitorLog",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "\nDECLARE @BatchSize INT = 10000;\nDECLARE @RowsAffected INT;\n\n\nWHILE 1 = 1\nBEGIN\n    DELETE TOP (@BatchSize)\n    FROM Adaptive.ActivityMonitorLog with (RowLock)\n    WHERE  CAST(CreatedDate AS DATE) < DATEADD(DAY, -31, CAST(GETDATE() AS DATE))\n    \n    SET @RowsAffected = @@ROWCOUNT;\n    \n\tWAITFOR DELAY '00:00:02';\n    IF @RowsAffected = 0\n        BREAK; \nEND\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/MISC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PurgeOld_ActivityLogs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ArchiveDB_ActivtyLogs_Delete45daysOld",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Archivedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "DECLARE @BatchSize INT = 10000;\nDECLARE @RowsAffected INT;\n \n \nWHILE 1 = 1\nBEGIN\n    DELETE TOP (@BatchSize)\n    FROM businessdata.activityLogs  with (RowLock)\n    WHERE  Cast(datetime as date) < Cast(getdate()-46 as date)\n    \n    SET @RowsAffected = @@ROWCOUNT; \n    \n\tWAITFOR DELAY '00:00:01';\n    IF @RowsAffected = 0\n        BREAK; \nEND\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ArchiveDB_MemberActivtyLogs_Delete45daysOld",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ArchiveDB_ActivtyLogs_Delete45daysOld",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Archivedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "DECLARE @BatchSize INT = 10000;\nDECLARE @RowsAffected INT;\n \n \nWHILE 1 = 1\nBEGIN\n    DELETE TOP (@BatchSize)\n    FROM businessdata.MemberActivityLog  with (RowLock)\n    WHERE  Cast(CreatedDate as date) < Cast(getdate()-46 as date)\n    \n    SET @RowsAffected = @@ROWCOUNT; \n    \n\tWAITFOR DELAY '00:00:01';\n    IF @RowsAffected = 0\n        BREAK; \nEND\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/MISC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUAlerts_PROD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExternalAlerts_Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "EXEC sps_GetExternalAlertRecipients",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SubscriptionID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SubscriptionID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "AccountID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "AccountID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "EMAIL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "EMAIL",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PHONE",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "PHONE",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PROD_SQLDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_GetExternalAlertRecipientsDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "GetThresholdAlertSubscriptions_Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "EXEC Sps_GetThresholdAlertSubscriptionsToFile",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PROD_SQLDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_GetThresholdAlertSubscriptionsDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "GetTransactionAlertSubscription_Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "EXEC sps_GetTransactionAlertSubscriptionToFile",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PROD_SQLDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_GetTransactionAlertSubscriptionsDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"DateFormat": {
						"type": "String"
					},
					"FromDateTime": {
						"type": "String"
					},
					"SampleDate": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PROD_SQLDataSet')]",
				"[concat(variables('factoryId'), '/datasets/PROD_GetExternalAlertRecipientsDataSet')]",
				"[concat(variables('factoryId'), '/datasets/PROD_GetThresholdAlertSubscriptionsDataSet')]",
				"[concat(variables('factoryId'), '/datasets/PROD_GetTransactionAlertSubscriptionsDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUDoneProcessing_PROD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BBAlerts_Copy data1_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetStartingTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetCurrentTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderStoredProcedureName": "[[alert].[sps_ReferenceFileReport]",
								"storedProcedureParameters": {
									"FromDateTime": {
										"type": "String",
										"value": {
											"value": "@variables('StartingTime')",
											"type": "Expression"
										}
									},
									"IncidentIds": {
										"type": "String",
										"value": "[[102,104,105,106,107,108,109,110,60,15,9]"
									},
									"ToDateTime": {
										"type": "String",
										"value": {
											"value": "@variables('EndingTime')",
											"type": "Expression"
										}
									},
									"Types": {
										"type": "String",
										"value": "[[\"text\",\"email\"]"
									}
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SubscriptionID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SubscriptionID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Type",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MessageContent",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MessageContent",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PROD_BBAlertsDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_DoneProcessingDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "GetLastProcessedDateTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "SELECT LastProcessedDateTime\nFROM ExternalAlertImportLog",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PROD_SQLDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetStartingTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetLastProcessedDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartingTime",
							"value": {
								"value": "@formatDateTime(activity('GetLastProcessedDateTime').output.firstRow.LastProcessedDateTime, 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetCurrentTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "EndingTime",
							"value": {
								"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UpdateLastProcessedDateTime",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "BBAlerts_Copy data1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "UPDATE ExternalAlertImportLog\nSET LastProcessedDateTime = '@{variables('EndingTime')}'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartingTime": {
						"type": "String"
					},
					"EndingTime": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PROD_BBAlertsDataset')]",
				"[concat(variables('factoryId'), '/datasets/PROD_DoneProcessingDataSet')]",
				"[concat(variables('factoryId'), '/datasets/PROD_SQLDataSet')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUDoneProcessing_PROD_1stversion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BBAlerts_Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderStoredProcedureName": "[[alert].[sps_ReferenceFileReport]",
								"storedProcedureParameters": {
									"FromDateTime": {
										"type": "String",
										"value": {
											"value": "@formatDateTime(addMinutes(utcnow(), -5), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										}
									},
									"IncidentIds": {
										"type": "String",
										"value": "[[102,104,105,106,107,108,109,110,60,15,9]"
									},
									"ToDateTime": {
										"type": "String",
										"value": {
											"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										}
									},
									"Types": {
										"type": "String",
										"value": "[[\"text\",\"email\"]"
									}
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SubscriptionID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SubscriptionID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Type",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MessageContent",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MessageContent",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PROD_BBAlertsDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_DoneProcessingDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FromDateTime": {
						"type": "string",
						"defaultValue": "@addminutes(utcnow(), -5)"
					},
					"ToDateTime": {
						"type": "string",
						"defaultValue": "@utcnow()"
					}
				},
				"variables": {
					"DateFormat": {
						"type": "String"
					},
					"FromDateTime": {
						"type": "String"
					},
					"SampleDate": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PROD_BBAlertsDataset')]",
				"[concat(variables('factoryId'), '/datasets/PROD_DoneProcessingDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_ActivityLogs_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ActivityLog_UpsertTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE (DestinationSchemaName = 'ActivityLog')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DependentTables_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ActivityLog_UpsertTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ActivityLog_UpsertTables').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "BusinessData_Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM @{item().SourceSchemaName}.@{item().SourceTableName} with (NOLOCK) WHERE CAST(@{item().KeyColumn} AS DATE) >= DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE)) OR CAST(@{item().KeyColumn2} AS DATE) >= DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"ID"
												]
											},
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SCCUPROD_BusinessData_Source",
											"type": "DatasetReference",
											"parameters": {
												"SourceDB": "@item().SourceDBName",
												"SourceTable": "@item().SourceTableName",
												"SourceSchema": "@item().SourceSchemaName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Archive_Destination",
											"type": "DatasetReference",
											"parameters": {
												"DestinationTable": "@item().DestinationTableName",
												"DestinationSchema": "dbo"
											}
										}
									]
								},
								{
									"name": "SendMainl-BusinessDataFailure_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "BusinessData_Copy data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendEmail_Failure",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Subject": {
												"value": "@concat('Pipeline -', activity('BusinessData_Copy data').name, ' has been failed')",
												"type": "Expression"
											},
											"Content": {
												"value": "@activity('BusinessData_Copy data').output.errors.message",
												"type": "Expression"
											},
											"Importance": "High"
										}
									}
								}
							]
						}
					},
					{
						"name": "ActivityLogsToArchive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ActivityLog_UpsertTables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ActivityLogsToArchive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BusinessData_Rebuild_ActivityLogs_Index",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DependentTables_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ActivityLogsToArchive",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BusinessData_Rebuild_ActivityLogs_Index",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BusinessData_Rebuild_ActivityLogs_Stat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BusinessData_Rebuild_ActivityLogs_Index",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BusinessData_Rebuild_ActivityLogs_Stat",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PurgeOld_ActivityLogs",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ActivityLogsToArchive",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PurgeOld_ActivityLogs",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/pipelines/ActivityLogsToArchive')]",
				"[concat(variables('factoryId'), '/pipelines/BusinessData_Rebuild_ActivityLogs_Index')]",
				"[concat(variables('factoryId'), '/pipelines/BusinessData_Rebuild_ActivityLogs_Stat')]",
				"[concat(variables('factoryId'), '/pipelines/PurgeOld_ActivityLogs')]",
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_BusinessData_Source')]",
				"[concat(variables('factoryId'), '/datasets/Archive_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_AdminLoginHistory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "spi_AdminLoginHistoryActiveMember",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spi_AdminLoginHistoryActiveMember]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BusinessDataPROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention/MISC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_Admin_LogDB_DynamicRetention')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Admin_LogDB_Archive_LookUp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='AdminLogDb' AND IsArchiveEnabled=1 AND ArchiveDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Admin_LogDB_Archive_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Admin_LogDB_Archive_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Admin_LogDB_Archive_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "CheckRowCount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "SELECT count(1) as 'RecordCount' FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SCCUPROD_Admin_LogDB_Source",
											"type": "DatasetReference",
											"parameters": {
												"SourceDB": "@item().SourceDBName",
												"SourceTable": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"SourceSchema": {
													"value": "@item().SourceSchemaName",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "If Reecords exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckRowCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('CheckRowCount').output.firstRow['RecordCount'],0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "LogDb_Script",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "Admin_LogDb_Copy data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SCCU_AdminLogdb_PROD",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "DELETE  FROM @{item().SourceSchemaName}.@{item().SourceTableName}  WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))\n\n",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "Admin_LogDb_Copy data",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SCCUPROD_Admin_LogDB_Source",
														"type": "DatasetReference",
														"parameters": {
															"SourceDB": "@item().SourceDBName",
															"SourceTable": "@item().SourceTableName",
															"SourceSchema": "@item().SourceSchemaName"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Archive_Destination",
														"type": "DatasetReference",
														"parameters": {
															"DestinationTable": "@item().DestinationTableName",
															"DestinationSchema": "@item().DestinationSchemaName"
														}
													}
												]
											},
											{
												"name": "SendMail-BusinessDataFailure",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Admin_LogDb_Copy data",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('Admin_LogDb_Copy data').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('Admin_LogDb_Copy data').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											},
											{
												"name": "SendMail-BusinessDataFailure_Delete",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "LogDb_Script",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('LogDb_Script').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('LogDb_Script').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Admin_LogDB_Purge_LookUp",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Admin_LogDB_Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='AdminLogDb' AND IsPurgeEnabled=1 AND PurgeDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Admin_LogDB_Purge_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Admin_LogDB_Purge_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Admin_LogDB_Purge_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "LogDb_Purge_Script",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SCCU_Archivedb_PROD_DTU",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "DELETE  FROM @{item().DestinationSchemaName}.@{item().DestinationTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().PurgeDays}, CAST(GETDATE() AS DATE))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "RebuildIndex",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Admin_LogDB_Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_AdminLogdb_PROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Statistics",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RebuildIndex",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_UpdateStatistics]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_AdminLogdb_PROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_AdminLogdb_PROD')]",
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_Admin_LogDB_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Archive_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_Admin_MetaDB_DynamicRetention')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Admin_MetaDB_Archive_LookUp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='AdminMetaDb' AND IsArchiveEnabled=1 AND ArchiveDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Admin_MetaDB_Archive_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Admin_MetaDB_Archive_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Admin_MetaDB_Archive_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "CheckRowCount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "SELECT count(1) as 'RecordCount' FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SCCUPROD_Admin_MetaDB_Source",
											"type": "DatasetReference",
											"parameters": {
												"SourceDB": "@item().SourceDBName",
												"SourceTable": "@item().SourceTableName",
												"SourceSchema": "@item().SourceSchemaName"
											}
										}
									}
								},
								{
									"name": "If record exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckRowCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('CheckRowCount').output.firstRow['RecordCount'],0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "AdminMetaDB_Script",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "AdminMetaDB_Copy data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SCCU_AdminMetadb_PROD",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "DELETE  FROM @{item().SourceSchemaName}.@{item().SourceTableName}  WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))\n\n",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "AdminMetaDB_Copy data",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlMISource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
															"type": "Expression"
														},
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SCCUPROD_Admin_MetaDB_Source",
														"type": "DatasetReference",
														"parameters": {
															"SourceDB": "@item().SourceDBName",
															"SourceTable": "@item().SourceTableName",
															"SourceSchema": "@item().SourceSchemaName"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Archive_Destination",
														"type": "DatasetReference",
														"parameters": {
															"DestinationTable": "@item().DestinationTableName",
															"DestinationSchema": "@item().DestinationSchemaName"
														}
													}
												]
											},
											{
												"name": "SendMail-BusinessDataFailure",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "AdminMetaDB_Copy data",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('AdminMetaDB_Copy data').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('AdminMetaDB_Copy data').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											},
											{
												"name": "SendMail-BusinessDataFailure_Delete",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "AdminMetaDB_Script",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('AdminMetaDB_Script').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('AdminMetaDB_Script').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Admin_METADB_Purge_LookUp",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Admin_MetaDB_Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='AdminMetaDb' AND IsPurgeEnabled=1 AND PurgeDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Admin_MetaDB_Purge_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Admin_METADB_Purge_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Admin_METADB_Purge_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "MetaDb_Purge_Script",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SCCU_Archivedb_PROD_DTU",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "DELETE  FROM @{item().DestinationSchemaName}.@{item().DestinationTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().PurgeDays}, CAST(GETDATE() AS DATE))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "RebuildIndex",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Admin_MetaDB_Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_AdminMetadb_PROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Statistics",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RebuildIndex",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_UpdateStatistics]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_AdminMetadb_PROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_AdminMetadb_PROD')]",
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_Admin_MetaDB_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Archive_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_Anonymous_LogDB_DynamicRetention')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Anonymous_LogDB_Archive_LookUp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='AnonymousLogDb' AND IsArchiveEnabled=1 AND ArchiveDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Anonymous_LogDB_Archive_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Anonymous_LogDB_Archive_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Anonymous_LogDB_Archive_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "CheckRowCount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "SELECT count(1) as 'RecordCount' FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SCCUPROD_Anonymous_LogDB_Source",
											"type": "DatasetReference",
											"parameters": {
												"SourceDB": "@item().SourceDBName",
												"SourceTable": "@item().SourceTableName",
												"SourceSchema": "@item().SourceSchemaName"
											}
										}
									}
								},
								{
									"name": "If record exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckRowCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('CheckRowCount').output.firstRow['RecordCount'],0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Anonymous_LogDb_Script",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "Anonymous_LogDb_Copy data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SCCU_AnonymousLogdb_PROD",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "DELETE  FROM @{item().SourceSchemaName}.@{item().SourceTableName}  WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))\n\n",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "Anonymous_LogDb_Copy data",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SCCUPROD_Anonymous_LogDB_Source",
														"type": "DatasetReference",
														"parameters": {
															"SourceDB": "@item().SourceDBName",
															"SourceTable": "@item().SourceTableName",
															"SourceSchema": "@item().SourceSchemaName"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Archive_Destination",
														"type": "DatasetReference",
														"parameters": {
															"DestinationTable": "@item().DestinationTableName",
															"DestinationSchema": "@item().DestinationSchemaName"
														}
													}
												]
											},
											{
												"name": "SendMail-BusinessDataFailure",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Anonymous_LogDb_Copy data",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('Anonymous_LogDb_Copy data').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('Anonymous_LogDb_Copy data').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											},
											{
												"name": "SendMail-BusinessDataFailure_Delete",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Anonymous_LogDb_Script",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('Anonymous_LogDb_Script').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('Anonymous_LogDb_Script').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LogDB_Purge_LookUp",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Anonymous_LogDB_Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='AnonymousLogDb' AND IsPurgeEnabled=1 AND PurgeDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Anonymous_LogDB_Purge_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LogDB_Purge_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LogDB_Purge_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "LogDb_Purge_Script",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SCCU_Archivedb_PROD_DTU",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "DELETE  FROM @{item().DestinationSchemaName}.@{item().DestinationTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().PurgeDays}, CAST(GETDATE() AS DATE))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "RebuildIndex",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Anonymous_LogDB_Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_AnonymousLogdb_PROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Statistics",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RebuildIndex",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_UpdateStatistics]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_AnonymousLogdb_PROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_AnonymousLogdb_PROD')]",
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_Anonymous_LogDB_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Archive_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_Anonymous_MetaDB_DynamicRetention')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Anonymous_MetaDB_Archive_LookUp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='AnonymousMetaDb' AND IsArchiveEnabled=1 AND ArchiveDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Anonymous_MetaDB_Archive_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Anonymous_MetaDB_Archive_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Anonymous_MetaDB_Archive_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "CheckRowCount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "SELECT count(1) as 'RecordCount' FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SCCUPROD_Anonymous_MetaDB_Source",
											"type": "DatasetReference",
											"parameters": {
												"SourceDB": "@item().SourceDBName",
												"SourceTable": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"SourceSchema": "@item().SourceSchemaName"
											}
										}
									}
								},
								{
									"name": "If Reecords exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckRowCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('CheckRowCount').output.firstRow['RecordCount'],0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Anonymous_MetaDB_Script",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "Anonymous_MetaDB_Copy data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SCCU_AnonymousMetadb_PROD",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "DELETE  FROM @{item().SourceSchemaName}.@{item().SourceTableName}  WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))\n\n",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "Anonymous_MetaDB_Copy data",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SCCUPROD_Anonymous_MetaDB_Source",
														"type": "DatasetReference",
														"parameters": {
															"SourceDB": "@item().SourceDBName",
															"SourceTable": "@item().SourceTableName",
															"SourceSchema": "@item().SourceSchemaName"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Archive_Destination",
														"type": "DatasetReference",
														"parameters": {
															"DestinationTable": "@item().DestinationTableName",
															"DestinationSchema": "@item().DestinationSchemaName"
														}
													}
												]
											},
											{
												"name": "SendMail-BusinessDataFailure",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Anonymous_MetaDB_Copy data",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('Anonymous_MetaDB_Copy data').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('Anonymous_MetaDB_Copy data').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											},
											{
												"name": "SendMail-BusinessDataFailure_Delete",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Anonymous_MetaDB_Script",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('Anonymous_MetaDB_Script').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('Anonymous_MetaDB_Script').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "METADB_Purge_LookUp",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Anonymous_MetaDB_Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='AnonymousMetaDb' AND IsPurgeEnabled=1 AND PurgeDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Anonymous_MetaDB_Purge_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "METADB_Purge_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('METADB_Purge_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "MetaDb_Purge_Script",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SCCU_Archivedb_PROD_DTU",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "DELETE  FROM @{item().DestinationSchemaName}.@{item().DestinationTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().PurgeDays}, CAST(GETDATE() AS DATE))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "RebuildIndex",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Anonymous_MetaDB_Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_AnonymousMetadb_PROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Statistics",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RebuildIndex",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_UpdateStatistics]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_AnonymousMetadb_PROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_AnonymousMetadb_PROD')]",
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_Anonymous_MetaDB_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Archive_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_BBAlerts_DynamicRetention')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BBAlerts_Archive",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='BBAlerts'  AND IsArchiveEnabled=1 AND ArchiveDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Archive_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "BBAlerts_Archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('BBAlerts_Archive').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "BBAlerts_Script",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "BBAlerts_Copy data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SCCU_Logdb_PROD_DTU",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "DELETE  FROM @{item().SourceSchemaName}.@{item().SourceTableName}  WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))\n\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "BBAlerts_Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SCCUPROD_BBAlerts_Source",
											"type": "DatasetReference",
											"parameters": {
												"SourceDB": "@item().SourceDBName",
												"SourceTable": "@item().SourceTableName",
												"SourceSchema": "@item().SourceSchemaName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Archive_Destination",
											"type": "DatasetReference",
											"parameters": {
												"DestinationTable": "@item().DestinationTableName",
												"DestinationSchema": "@item().DestinationSchemaName"
											}
										}
									]
								},
								{
									"name": "SendMail-BusinessDataFailure",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "BBAlerts_Copy data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendEmail_Failure",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Subject": {
												"value": "@concat('Pipeline -', activity('BBAlerts_Copy data').name, ' has been failed')",
												"type": "Expression"
											},
											"Content": {
												"value": "@activity('BBAlerts_Copy data').output.errors.message",
												"type": "Expression"
											},
											"Importance": "High"
										}
									}
								},
								{
									"name": "SendMail-BusinessDataFailure_Delete",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "BBAlerts_Script",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendEmail_Failure",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Subject": {
												"value": "@concat('Pipeline -', activity('BBAlerts_Script').name, ' has been failed')",
												"type": "Expression"
											},
											"Content": {
												"value": "@activity('BBAlerts_Script').output.errors.message",
												"type": "Expression"
											},
											"Importance": "High"
										}
									}
								}
							]
						}
					},
					{
						"name": "BBAlerts_Purge",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='BBAlerts' AND IsPurgeEnabled=1 AND PurgeDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Purge_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "BBAlerts_Purge",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('BBAlerts_Purge').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "BBAlerts_Purge_Script",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SCCU_Archivedb_PROD_DTU",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "DELETE  FROM @{item().DestinationSchemaName}.@{item().DestinationTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().PurgeDays}, CAST(GETDATE() AS DATE))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Rebuild Index",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BBAlertsPROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Statistics",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Rebuild Index",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_UpdateStatistics]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_BBAlertsPROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BBAlertsPROD')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Logdb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_BBAlerts_Source')]",
				"[concat(variables('factoryId'), '/datasets/Archive_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_BusinessData_DynamicRetention')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BusinessData_Archive",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Static BusinessData",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='BusinessData' AND IsArchiveEnabled=1 AND ArchiveDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Archive_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "BusinessData_Archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('BusinessData_Archive').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "CheckRowCount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "SELECT count(1) as 'RecordCount' FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SCCUPROD_BusinessData_Source",
											"type": "DatasetReference",
											"parameters": {
												"SourceDB": "@item().SourceDBName",
												"SourceTable": "@item().SourceTableName",
												"SourceSchema": "@item().SourceSchemaName"
											}
										}
									}
								},
								{
									"name": "If Record exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckRowCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('CheckRowCount').output.firstRow['RecordCount'],0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "BusinessData_Script",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "BusinessData_Copy data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SCCU_BusinessDataPROD",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "DECLARE @BatchSize INT = 10000;\nDECLARE @RowsAffected INT;\n \nWHILE 1 = 1\nBEGIN\n    DELETE TOP (@BatchSize)\n    FROM @{item().SourceSchemaName}.@{item().SourceTableName}  \n\tWHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))\n    \n    SET @RowsAffected = @@ROWCOUNT; \n    \n\tWAITFOR DELAY '00:00:01';\n    IF @RowsAffected = 0\n        BREAK; \nEND",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "BusinessData_Copy data",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SCCUPROD_BusinessData_Source",
														"type": "DatasetReference",
														"parameters": {
															"SourceDB": "@item().SourceDBName",
															"SourceTable": "@item().SourceTableName",
															"SourceSchema": "@item().SourceSchemaName"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Archive_Destination",
														"type": "DatasetReference",
														"parameters": {
															"DestinationTable": "@item().DestinationTableName",
															"DestinationSchema": "@item().DestinationSchemaName"
														}
													}
												]
											},
											{
												"name": "SendMail-BusinessDataFailure",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "BusinessData_Copy data",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('BusinessData_Copy data').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('BusinessData_Copy data').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											},
											{
												"name": "SendMail-BusinessDataFailure_Delete",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "BusinessData_Script",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('BusinessData_Script').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('BusinessData_Script').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "BusinessData_Purge",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='BusinessData' AND IsPurgeEnabled=1 AND PurgeDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Purge_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "BusinessData_Purge",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('BusinessData_Purge').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "BusinessData_Purge_Script",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SCCU_Archivedb_PROD_DTU",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "DELETE  FROM @{item().DestinationSchemaName}.@{item().DestinationTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().PurgeDays}, CAST(GETDATE() AS DATE))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "BusinessData_Rebuild_Index",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BusinessData_Rebuild_Index",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BusinessData_Rebuild_Stat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BusinessData_Rebuild_Index",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BusinessData_Rebuild_Stat",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Static BusinessData",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SCCUPROD_Static_BusinessData_DynamicRetention",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/pipelines/BusinessData_Rebuild_Index')]",
				"[concat(variables('factoryId'), '/pipelines/BusinessData_Rebuild_Stat')]",
				"[concat(variables('factoryId'), '/pipelines/SCCUPROD_Static_BusinessData_DynamicRetention')]",
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_BusinessData_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]",
				"[concat(variables('factoryId'), '/datasets/Archive_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_LogDBMI_DynamicRetention')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LogDBMI_Archive_LookUp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='LogDBMI' AND IsArchiveEnabled=1 AND ArchiveDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Archive_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LogDBMI_Archive_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LogDBMI_Archive_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "CheckRowCount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "SELECT count(1) as 'RecordCount' FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SCCUPROD_LogDBMI_Source",
											"type": "DatasetReference",
											"parameters": {
												"SourceDB": "@item().SourceDBName",
												"SourceTable": "@item().SourceTableName",
												"SourceSchema": "@item().SourceSchemaName"
											}
										}
									}
								},
								{
									"name": "If Reecords exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckRowCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('CheckRowCount').output.firstRow['RecordCount'],0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "LogDBMI_Script",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "LogDbMI_Copy data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SCCU_Logdb_PROD",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "DELETE  FROM @{item().SourceSchemaName}.@{item().SourceTableName}  WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))\n\n",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "LogDbMI_Copy data",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlMISource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
															"type": "Expression"
														},
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SCCUPROD_LogDBMI_Source",
														"type": "DatasetReference",
														"parameters": {
															"SourceDB": "@item().SourceDBName",
															"SourceTable": "@item().SourceTableName",
															"SourceSchema": "@item().SourceSchemaName"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Archive_Destination",
														"type": "DatasetReference",
														"parameters": {
															"DestinationTable": "@item().DestinationTableName",
															"DestinationSchema": "@item().DestinationSchemaName"
														}
													}
												]
											},
											{
												"name": "SendMail-BusinessDataFailure",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "LogDbMI_Copy data",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('LogDbMI_Copy data').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('LogDbMI_Copy data').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											},
											{
												"name": "SendMail-BusinessDataFailure_Delete",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "LogDBMI_Script",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('LogDBMI_Script').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('LogDBMI_Script').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LogDBMI_Purge_LookUp",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='LogDBMI' AND IsPurgeEnabled=1 AND PurgeDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Purge_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LogDBMI_Purge_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LogDBMI_Purge_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "LogDBMI_Purge_Script",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SCCU_Archivedb_PROD_DTU",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "DELETE  FROM @{item().DestinationSchemaName}.@{item().DestinationTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().PurgeDays}, CAST(GETDATE() AS DATE))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Rebuild Index",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Statistics",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Rebuild Index",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_UpdateStatistics]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Logdb_PROD')]",
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_LogDBMI_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Archive_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_LogDB_DynamicRetention')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LogDB_Archive_LookUp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='LogDb' AND IsArchiveEnabled=1 AND ArchiveDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Archive_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LogDB_Archive_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LogDB_Archive_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "CheckRowCount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT count(1) as 'RecordCount' FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SCCUPROD_LogDB_Source",
											"type": "DatasetReference",
											"parameters": {
												"SourceDB": "@item().SourceDBName",
												"SourceTable": "@item().SourceTableName",
												"SourceSchema": "@item().SourceSchemaName"
											}
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckRowCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('CheckRowCount').output.firstRow['RecordCount'],0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "LogDb_Script",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "LogDb_Copy data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SCCU_Logdb_PROD_DTU",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "DELETE  FROM @{item().SourceSchemaName}.@{item().SourceTableName}  WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))\n\n",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "LogDb_Copy data",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SCCUPROD_LogDB_Source",
														"type": "DatasetReference",
														"parameters": {
															"SourceDB": "@item().SourceDBName",
															"SourceTable": "@item().SourceTableName",
															"SourceSchema": "@item().SourceSchemaName"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Archive_Destination",
														"type": "DatasetReference",
														"parameters": {
															"DestinationTable": "@item().DestinationTableName",
															"DestinationSchema": "@item().DestinationSchemaName"
														}
													}
												]
											},
											{
												"name": "SendMail-BusinessDataFailure",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "LogDb_Copy data",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('LogDb_Copy data').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('LogDb_Copy data').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											},
											{
												"name": "SendMail-BusinessDataFailure_Delet1",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "LogDb_Script",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('LogDb_Script').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('LogDb_Script').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LogDB_Purge_LookUp",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='LogDb' AND IsPurgeEnabled=1 AND PurgeDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Purge_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LogDB_Purge_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LogDB_Purge_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "LogDb_Purge_Script",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SCCU_Archivedb_PROD_DTU",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "DELETE  FROM @{item().DestinationSchemaName}.@{item().DestinationTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().PurgeDays}, CAST(GETDATE() AS DATE))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Rebuild Index",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Statistics",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Rebuild Index",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_UpdateStatistics]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Logdb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Logdb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_LogDB_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Archive_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_MetaDB_DynamicRetention')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MetaDB_Archive_LookUp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='MetaDb' AND IsArchiveEnabled=1 AND ArchiveDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Archive_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "MetaDB_Archive_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MetaDB_Archive_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "CheckRowCount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "SELECT count(1) as 'RecordCount' FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SCCUPROD_MetaDB_Source",
											"type": "DatasetReference",
											"parameters": {
												"SourceDB": "@item().SourceDBName",
												"SourceTable": "@item().SourceTableName",
												"SourceSchema": "@item().SourceSchemaName"
											}
										}
									}
								},
								{
									"name": "If Record exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckRowCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('CheckRowCount').output.firstRow['RecordCount'],0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "MetaDB_Script",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "MetaDB_Copy data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SCCU_Metadb_PROD",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "DELETE  FROM @{item().SourceSchemaName}.@{item().SourceTableName}  WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))\n\n",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "MetaDB_Copy data",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().SourceSchemaName}.@{item().SourceTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().ArchiveDays}, CAST(GETDATE() AS DATE))",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SCCUPROD_MetaDB_Source",
														"type": "DatasetReference",
														"parameters": {
															"SourceDB": "@item().SourceDBName",
															"SourceTable": "@item().SourceTableName",
															"SourceSchema": "@item().SourceSchemaName"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Archive_Destination",
														"type": "DatasetReference",
														"parameters": {
															"DestinationTable": "@item().DestinationTableName",
															"DestinationSchema": "@item().DestinationSchemaName"
														}
													}
												]
											},
											{
												"name": "SendMail-BusinessDataFailure",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "MetaDB_Copy data",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('MetaDB_Copy data').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('MetaDB_Copy data').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											},
											{
												"name": "SendMail-BusinessDataFailure_Delete",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "MetaDB_Script",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "SendEmail_Failure",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Subject": {
															"value": "@concat('Pipeline -', activity('MetaDB_Script').name, ' has been failed')",
															"type": "Expression"
														},
														"Content": {
															"value": "@activity('MetaDB_Copy data').output.errors.message",
															"type": "Expression"
														},
														"Importance": "High"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "METADB_Purge_LookUp",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM MasterConfig WHERE DestinationSchemaName='MetaDb' AND IsPurgeEnabled=1 AND PurgeDays > 0",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCCUPROD_ArchiveSqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Purge_ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "METADB_Purge_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('METADB_Purge_LookUp').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "MetaDb_Purge_Script",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SCCU_Archivedb_PROD_DTU",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "DELETE  FROM @{item().DestinationSchemaName}.@{item().DestinationTableName} WHERE CAST(@{item().KeyColumn} AS DATE) < DATEADD(DAY, -@{item().PurgeDays}, CAST(GETDATE() AS DATE))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "MetaDB_DeleteTokens",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Archive_ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Metadb_PROD",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "Declare @userAPI varchar(36)\nset @userAPI=(select objectguid from userobjects with (readpast) where sAMAccountName='APIPUSHUSER');\n \nDeclare @startDate datetime=getDate();\nprint @startDate\nDECLARE @done bit = 0;  \nWHILE (@done = 0)  \nBEGIN  \n    DELETE TOP(5000)\n\tFROM RefreshTokens with (ROWLOCK)\n\tWHERE ExpiresUtc < GETUTCDATE() or UserId=@userAPI\n    IF @@rowcount < 1 SET @done = 1;  \n\tWAITFOR DELAY '00:00:02';\nEND; ",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "MetaDB_DeleteOther",
						"description": "Token, TempUserLoginValidations, NF_UserConnections",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MetaDB_DeleteTokens",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Metadb_PROD",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "\nDELETE\tFROM RefreshTokens with (ROWLOCK)\n\tWHERE ExpiresUtc < GETUTCDATE()\n\nDELETE FROM [dbo].[NF_UserConnections] with (ROWLOCK)\n\tWHERE CreatedDate <= DATEADD(DAY, -2, CAST(GETDATE() AS DATE))\n \nDELETE\tFROM TempUserLoginValidations with (ROWLOCK)\n\t\tWHERE [IsDeleted]=1",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "RebuildIndex",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "MetaDB_DeleteOther",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_RebuildIndex]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Metadb_PROD",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Statistics",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RebuildIndex",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_UpdateStatistics]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_Metadb_PROD",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_ArchiveSqlDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Metadb_PROD')]",
				"[concat(variables('factoryId'), '/datasets/SCCUPROD_MetaDB_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Archive_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_Static_BusinessData_DynamicRetention')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EmulationActivityDynamicDescriptionValue_copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "SELECT t1.*,ISNULL(t2.createddate,DATEADD(DAY,-11,CAST(GETDATE() AS DATE))) as  CreatedDate FROM EmulationActivityDynamicDescriptionValue t1 WITH (NOLOCK) LEFT JOIN EmulationActivityLogs t2 WITH (NOLOCK) on t1.emulationactivitylogid=t2.id\nWHERE CAST(t2.createddate AS DATE) < DATEADD(DAY,-10,CAST(GETDATE() AS DATE))\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"ID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EmulationActivityLogID",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "EmulationActivityLogID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "ActivityDynamicDescriptionValue",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ActivityDynamicDescriptionValue",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PROD_EmulationActivityDynamicDescriptionValue_Souce",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_emulation_Destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "EmulationActivityDynamicDescriptionValue",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "EmulationActivityDynamicDescriptionValue_copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Businessdata_PROD",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DELETE t1\nFROM EmulationActivityDynamicDescriptionValue t1\nLEFT JOIN EmulationActivityLogs t2\n    ON t1.EmulationActivityLogId = t2.Id\nWHERE CAST(t2.CreatedDate AS DATE) < DATEADD(DAY, -10, CAST(GETDATE() AS DATE))"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "EmulationActivityDynamicDescriptionValue_Purge",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "EmulationActivityDynamicDescriptionValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Archivedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DECLARE @BatchSize INT = 10000;  -- Define the batch size for deletion\nDECLARE @RowsAffected INT = 1;    -- Initialize with a non-zero value\nDECLARE @TotalRowsDeleted INT = 0; -- Variable to accumulate total rows deleted\nDECLARE @LoopCount INT = 0;       -- Variable to count the number of loop executions\n \n-- Start the batch-wise deletion process\nWHILE @RowsAffected > 0\nBEGIN\n    -- Increment the loop execution count\n    SET @LoopCount = @LoopCount + 1;\n \n    -- Delete top (@BatchSize) rows based on the purge condition\n    DELETE TOP (@BatchSize)\n    FROM businessdata.EmulationActivityDynamicDescriptionValue\n   WHERE CAST(createddate AS DATE) < DATEADD(DAY,-47,CAST(GETDATE() AS DATE))\n\n    -- Get the number of rows deleted in the last batch\n    SET @RowsAffected = @@ROWCOUNT;\n \n    -- Accumulate the total number of rows deleted\n    SET @TotalRowsDeleted = @TotalRowsDeleted + @RowsAffected;\nEND\n \n-- Optionally, you can output the total rows deleted and loop execution count for logging purposes\nSELECT @TotalRowsDeleted AS TotalRowsDeleted, @LoopCount AS LoopExecutionCount;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "MemberActivityDynamicDescriptionValue_Copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "SELECT t1.*,ISNULL(t2.createddate,DATEADD(DAY,-11,CAST(GETDATE() AS DATE))) as  CreatedDate \nFROM MemberActivityDynamicDescriptionValue t1 with (Nolock) LEFT JOIN memberactivitylog t2 with (Nolock) on t1.MemberActivityLogID=t2.id\nWHERE CAST(t2.createddate AS DATE) < DATEADD(DAY,-10,CAST(GETDATE() AS DATE)) ",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"ID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "MemberActivityLogID",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "MemberActivityLogID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "ActivityDynamicDescriptionValue",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ActivityDynamicDescriptionValue",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PROD_MemberActivityDynamicDescriptionValue_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_MemberActivityDynamicDescriptionValue_Destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "MemberActivityDynamicDescriptionValue",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MemberActivityDynamicDescriptionValue_Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Businessdata_PROD",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DELETE t1 FROM MemberActivityDynamicDescriptionValue t1 LEFT JOIN memberactivitylog t2 on t1.MemberActivityLogID=t2.id\nWHERE CAST(t2.createddate AS DATE) < DATEADD(DAY,-10,CAST(GETDATE() AS DATE))\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "MemberActivityDynamicDescriptionValue_Purge",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MemberActivityDynamicDescriptionValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Archivedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DECLARE @BatchSize INT = 10000;  -- Define the batch size for deletion\nDECLARE @RowsAffected INT = 1;    -- Initialize with a non-zero value\nDECLARE @TotalRowsDeleted INT = 0; -- Variable to accumulate total rows deleted\nDECLARE @LoopCount INT = 0;       -- Variable to count the number of loop executions\n \n-- Start the batch-wise deletion process\nWHILE @RowsAffected > 0\nBEGIN\n    -- Increment the loop execution count\n    SET @LoopCount = @LoopCount + 1;\n \n    -- Delete top (@BatchSize) rows based on the purge condition\n    DELETE TOP (@BatchSize)\n    FROM businessdata.MemberActivityDynamicDescriptionValue\n   WHERE CAST(createddate AS DATE) < DATEADD(DAY,-47,CAST(GETDATE() AS DATE))\n\n\n    -- Get the number of rows deleted in the last batch\n    SET @RowsAffected = @@ROWCOUNT;\n \n    -- Accumulate the total number of rows deleted\n    SET @TotalRowsDeleted = @TotalRowsDeleted + @RowsAffected;\nEND\n \n-- Optionally, you can output the total rows deleted and loop execution count for logging purposes\nSELECT @TotalRowsDeleted AS TotalRowsDeleted, @LoopCount AS LoopExecutionCount;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "TransferMemberActivityLog_Copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "SELECT t1.*,ISNULL(t2.createddate,DATEADD(DAY,-11,CAST(GETDATE() AS DATE))) as  CreatedDate FROM TransferMemberActivityLog t1 with (NOLOCK) LEFT JOIN memberactivitylog t2 WITH (NOLOCK) on t1.MemberActivityLogID=t2.id\nWHERE CAST(t2.createddate AS DATE) < DATEADD(DAY,-10,CAST(GETDATE() AS DATE)) ",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"ID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "MemberActivityLogID",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "MemberActivityLogID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "PayeeOrDestination",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "PayeeOrDestination",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TransactionAmount",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "TransactionAmount",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "SourceAccountNumber",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "SourceAccountNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PROD_TransferMemberActivityLog_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PROD_TransferMemberActivityLog_Destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TransferMemberActivityLog",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "TransferMemberActivityLog_Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Businessdata_PROD",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DELETE t1 FROM TransferMemberActivityLog t1 LEFT JOIN memberactivitylog t2 on t1.MemberActivityLogID=t2.id\nWHERE CAST(t2.createddate AS DATE) < DATEADD(DAY,-10,CAST(GETDATE() AS DATE))\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "TransferMemberActivityLog_Purge",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "TransferMemberActivityLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_Archivedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DECLARE @BatchSize INT = 10000;  -- Define the batch size for deletion\nDECLARE @RowsAffected INT = 1;    -- Initialize with a non-zero value\nDECLARE @TotalRowsDeleted INT = 0; -- Variable to accumulate total rows deleted\nDECLARE @LoopCount INT = 0;       -- Variable to count the number of loop executions\n \n-- Start the batch-wise deletion process\nWHILE @RowsAffected > 0\nBEGIN\n    -- Increment the loop execution count\n    SET @LoopCount = @LoopCount + 1;\n \n    -- Delete top (@BatchSize) rows based on the purge condition\n    DELETE TOP (@BatchSize)\n    FROM businessdata.TransferMemberActivityLog\n   WHERE CAST(createddate AS DATE) < DATEADD(DAY,-47,CAST(GETDATE() AS DATE))\n    -- Get the number of rows deleted in the last batch\n    SET @RowsAffected = @@ROWCOUNT;\n \n    -- Accumulate the total number of rows deleted\n    SET @TotalRowsDeleted = @TotalRowsDeleted + @RowsAffected;\nEND\n \n-- Optionally, you can output the total rows deleted and loop execution count for logging purposes\nSELECT @TotalRowsDeleted AS TotalRowsDeleted, @LoopCount AS LoopExecutionCount;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SendMail-BusinessDataFailure_TranferMember",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TransferMemberActivityLog_Copy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendEmail_Failure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Subject": {
									"value": "@concat('Pipeline -', activity('TransferMemberActivityLog_Copy').name, ' has been failed')",
									"type": "Expression"
								},
								"Content": {
									"value": "@activity('TransferMemberActivityLog_Copy').output.errors.message",
									"type": "Expression"
								},
								"Importance": "High"
							}
						}
					},
					{
						"name": "SendMail-BusinessDataFailure_MemberActivityDymnamic1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "MemberActivityDynamicDescriptionValue_Copy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendEmail_Failure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Subject": {
									"value": "@concat('Pipeline -', activity('MemberActivityDynamicDescriptionValue_Copy').name, ' has been failed')",
									"type": "Expression"
								},
								"Content": {
									"value": "@activity('MemberActivityDynamicDescriptionValue_Copy').output.errors.message",
									"type": "Expression"
								},
								"Importance": "High"
							}
						}
					},
					{
						"name": "SendMail-BusinessDataFailure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EmulationActivityDynamicDescriptionValue_copy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendEmail_Failure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Subject": {
									"value": "@concat('Pipeline -', activity('EmulationActivityDynamicDescriptionValue_copy').name, ' has been failed')",
									"type": "Expression"
								},
								"Content": {
									"value": "@activity('EmulationActivityDynamicDescriptionValue_copy').output.errors.message",
									"type": "Expression"
								},
								"Importance": "High"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataRetention"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PROD_EmulationActivityDynamicDescriptionValue_Souce')]",
				"[concat(variables('factoryId'), '/datasets/PROD_emulation_Destination')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Businessdata_PROD')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/PROD_MemberActivityDynamicDescriptionValue_Source')]",
				"[concat(variables('factoryId'), '/datasets/PROD_MemberActivityDynamicDescriptionValue_Destination')]",
				"[concat(variables('factoryId'), '/datasets/PROD_TransferMemberActivityLog_Source')]",
				"[concat(variables('factoryId'), '/datasets/PROD_TransferMemberActivityLog_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Failure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_LoanDueAlerts_PROD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Count_LoanDueAlerts",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderStoredProcedureName": "[[dbo].[sps_LoanDueAlertSubscriptionToFile]",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PROD_SQLDataSet",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set_RowCount_LoanDueAlerts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Count_LoanDueAlerts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowCount_LoanDueAlerts",
							"value": {
								"value": "@length(activity('Count_LoanDueAlerts').output.value)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Check_RowCount_LoanDueAlerts",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set_RowCount_LoanDueAlerts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('RowCount_LoanDueAlerts'), 0)\n",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "LoanDueAlerts_Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "EXEC sps_LoanDueAlertSubscriptionToFile",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "SubscriptionID",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "SubscriptionID",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "AccountID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "AccountID",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "NumOfDaysBeforeDue",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "NumOfDaysBeforeDue",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "NumOfDaysAfterPastDue",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "NumOfDaysAfterPastDue",
														"type": "String",
														"physicalType": "String"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "PROD_SQLDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "PROD_LoanDue_DataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"RowCount_LoanDueAlerts": {
						"type": "Integer"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PROD_SQLDataSet')]",
				"[concat(variables('factoryId'), '/datasets/PROD_LoanDue_DataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendEmailActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendMail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetSendGridAPIKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ',activity('GetSendGridAPIKey').output.value)",
									"type": "Expression"
								},
								"Content-Type": "application/json"
							},
							"disableCertValidation": true,
							"url": {
								"value": "@pipeline().globalParameters.global_sendmail_api_url",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "{\"personalizations\":[{\"to\":[{\"email\":\"prem@claysys.com\"}]}],\"from\":{\"email\":\"@{pipeline().globalParameters.FromEmail}\"},\"subject\":\"@{pipeline().parameters.EmailSubject}\",\"content\":[{\"type\":\"text/html\",\"value\":\"Subject: @{pipeline().parameters.EmailSubject}\\nImportance: \"High\"\\nContent: @{pipeline().parameters.EmailBody}]}}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetSendGridAPIKey",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@concat('https://sccu-keyvault.vault.azure.net/secrets/SCCUSendGridAPI-PROD?api-version=7.0')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"recipientEmail": {
						"type": "string",
						"defaultValue": "prem@claysys.com"
					},
					"EmailSubject": {
						"type": "string",
						"defaultValue": "Test Email from ADF"
					},
					"EmailBody": {
						"type": "string",
						"defaultValue": "Test Mail"
					}
				},
				"folder": {
					"name": "DataRetention/MISC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendEmail_Failure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline email notification on job completion",
				"activities": [
					{
						"name": "GetSendGridAPIKey",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@concat('https://sccu-keyvault.vault.azure.net/secrets/SCCUSendGridAPI-PROD?api-version=7.0')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SendEmailNotification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetSendGridAPIKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ', activity('GetSendGridAPIKey').output.value)",
									"type": "Expression"
								},
								"Content-Type": "application/json"
							},
							"url": "https://api.sendgrid.com/v3/mail/send",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "{\"personalizations\":[{\"to\":[{\"email\":\"SCCUADFNotifications@claysys.com\"}]}],\"from\":{\"email\":\"@{pipeline().globalParameters.FromEmail}\"},\"subject\":\"@{pipeline().parameters.Subject}\",\"content\":[{\"type\":\"text/html\",\"value\":\"@{pipeline().parameters.Content}\"}],\"headers\": {\n    \"Priority\": \"@{pipeline().parameters.Importance}\",\n    \"Importance\": \"@{pipeline().parameters.Importance}\",\n    \"X-Priority\": \"@{if(equals(pipeline().parameters.Importance, 'High'), '1', '2')}\"\n  }}}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Subject": {
						"type": "string",
						"defaultValue": "Test Email from ADF pipeline"
					},
					"Content": {
						"type": "string",
						"defaultValue": "Test Email from ADF pipeline"
					},
					"Importance": {
						"type": "string",
						"defaultValue": "Normal"
					}
				},
				"folder": {
					"name": "DataRetention/MISC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendEmail_IT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline email notification on job completion",
				"activities": [
					{
						"name": "GetSendGridAPIKey",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@concat('https://sccu-keyvault.vault.azure.net/secrets/SCCUSendGridAPI-PROD?api-version=7.0')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SendEmailNotification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetSendGridAPIKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ', activity('GetSendGridAPIKey').output.value)",
									"type": "Expression"
								},
								"Content-Type": "application/json"
							},
							"url": "https://api.sendgrid.com/v3/mail/send",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"personalizations": [
									{
										"to": [
											{
												"email": "SCCUADFNotifications@claysys.com"
											},
											{
												"email": "dbcusoitsupport@cunextgen.com"
											}
										]
									}
								],
								"from": {
									"email": "@{pipeline().globalParameters.FromEmail}"
								},
								"subject": "@{pipeline().parameters.subject}",
								"content": [
									{
										"type": "text/html",
										"value": " @{pipeline().parameters.content}"
									}
								],
								"custom_args": {
									"pipelineName": "@{pipeline().parameters.pipelineName}",
									"importance": "@{pipeline().parameters.importance}"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Subject": {
						"type": "string"
					},
					"Content": {
						"type": "string"
					},
					"Importance": {
						"type": "string"
					},
					"PipelineName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetention/BacPac"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendEmail_Success')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline email notification on job completion",
				"activities": [
					{
						"name": "GetSendGridAPIKey",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@concat('https://sccu-keyvault.vault.azure.net/secrets/SCCUSendGridAPI-PROD?api-version=7.0')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SendEmailNotification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetSendGridAPIKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ', activity('GetSendGridAPIKey').output.value)",
									"type": "Expression"
								},
								"Content-Type": "application/json"
							},
							"url": "https://api.sendgrid.com/v3/mail/send",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "{\"personalizations\":[{\"to\":[{\"email\":\"SCCUADFNotifications@claysys.com\"},{\"email\":\"SCCUADF_PMONotifications@claysys.com\"}]}],\"from\":{\"email\":\"@{pipeline().globalParameters.FromEmail}\"},\"subject\":\"@{pipeline().parameters.Subject}\",\"content\":[{\"type\":\"text/html\",\"value\":\"@{pipeline().parameters.Content}\"}],\"headers\": {\n    \"Priority\": \"@{pipeline().parameters.Importance}\",\n    \"Importance\": \"@{pipeline().parameters.Importance}\",\n    \"X-Priority\": \"@{if(equals(pipeline().parameters.Importance, 'High'), '1', '2')}\"\n  }}}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Subject": {
						"type": "string",
						"defaultValue": "test sub"
					},
					"Content": {
						"type": "string",
						"defaultValue": "Teest ema"
					},
					"Importance": {
						"type": "string",
						"defaultValue": "Normal"
					}
				},
				"folder": {
					"name": "DataRetention/MISC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Summary_StoredProcedure_Emails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Getemail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendEmail_Success",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Subject": {
									"value": "@activity('Getemail').output.firstRow.Subject",
									"type": "Expression"
								},
								"Content": {
									"value": "@activity('Getemail').output.firstRow.EmailBody",
									"type": "Expression"
								},
								"Importance": "High"
							}
						}
					},
					{
						"name": "Getemail",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "EXEC @{pipeline().parameters.procName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "BacPac_Email_Proc",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"procName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetention/BacPac"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SendEmail_Success')]",
				"[concat(variables('factoryId'), '/datasets/BacPac_Email_Proc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UserCreditCards')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UserCreditCards_CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "UserCreditCards_StagingTruncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/UserCreditCards",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MEMBERTYPE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MEMBERTYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DNAACCTNBR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DNAACCTNBR",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "CCMACCTNBR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CCMACCTNBR",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "NEXTLYPERSONNUMBER",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NEXTLYPERSONNUMBER",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "DNABUSINESSORGNBR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DNABUSINESSORGNBR",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DNAMEMBERNUMBER",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DNAMEMBERNUMBER",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "NEXTLYSIGNUPDATE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NEXTLYSIGNUPDATE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DNACREDITCARDAGREEMENTNBR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DNACREDITCARDAGREEMENTNBR",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "Textbox6",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Textbox6",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Textbox14",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Textbox14",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Textbox12",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Textbox12",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Textbox10",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Textbox10",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Textbox8",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Textbox8",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OfflinSource_UserCreditCards",
								"type": "DatasetReference",
								"parameters": {
									"UserCreditCards": "@pipeline().parameters.FileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OfflineDestination_UserCreditCards",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UserCreditCards_StagingTruncate",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE UserCreditCards_Staging"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UserCreditCards_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Spi_InsertInToMemberCreditCardDetails]"
						},
						"linkedServiceName": {
							"referenceName": "SCCU_OfflineModedb_PROD_DTU",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "completed copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "PROD/UserCreditCards",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Completed_UserCreditCards_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Completed_UserCreditCards_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "Nextly User Credit Cards DNA_CCM*.csv"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "offline-services/PROD/UserCreditCards"
					}
				},
				"folder": {
					"name": "OfflineServices"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OfflinSource_UserCreditCards')]",
				"[concat(variables('factoryId'), '/datasets/OfflineDestination_UserCreditCards')]",
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]",
				"[concat(variables('factoryId'), '/datasets/Completed_UserCreditCards_Source')]",
				"[concat(variables('factoryId'), '/datasets/Completed_UserCreditCards_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ActivityLogsSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataPROD",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "MemberName",
						"type": "varchar"
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "Module",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Guid",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "ObjectGUID",
						"type": "varchar"
					},
					{
						"name": "BrowserVersion",
						"type": "varchar"
					},
					{
						"name": "IPAddress",
						"type": "varchar"
					},
					{
						"name": "BrowserName",
						"type": "varchar"
					},
					{
						"name": "LogEventType",
						"type": "varchar"
					},
					{
						"name": "SessionID",
						"type": "varchar"
					},
					{
						"name": "MappingType",
						"type": "varchar"
					},
					{
						"name": "DeviceID",
						"type": "varchar"
					},
					{
						"name": "ActionOrService",
						"type": "varchar"
					},
					{
						"name": "PayeeOrDestinationAccountNumber",
						"type": "varchar"
					},
					{
						"name": "TransactionAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SuccessStatus",
						"type": "varchar"
					},
					{
						"name": "PersonNumber",
						"type": "varchar"
					},
					{
						"name": "eAgreementNumber",
						"type": "varchar"
					},
					{
						"name": "SourceAccountNumber",
						"type": "varchar"
					},
					{
						"name": "CorrelationID",
						"type": "varchar"
					},
					{
						"name": "PayeeOrDestination",
						"type": "varchar"
					},
					{
						"name": "SourceOfLogin",
						"type": "varchar"
					},
					{
						"name": "UserAgentString",
						"type": "text"
					},
					{
						"name": "IsExcluded",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "activitylogs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Archive_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Archivedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DestinationTable": {
						"type": "string"
					},
					"DestinationSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetentionDatasets/Dynamic"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ErrorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantID",
						"type": "varchar"
					},
					{
						"name": "FormID",
						"type": "varchar"
					},
					{
						"name": "SystemIP",
						"type": "varchar"
					},
					{
						"name": "SiteURL",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Message",
						"type": "nvarchar"
					},
					{
						"name": "InnerException",
						"type": "nvarchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().DestinationSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().DestinationTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlMITable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_AdminLogdb_PROD",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_AdminLogdb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BacPac_Email_Proc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Logdb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Logdb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_CCM_CreditCard_AccountDetails_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Destination"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/COMPLETED/Completed_CCM_CreditCard_AccountDetails",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_CCM_CreditCard_AccountDetails_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/CCM_CreditCard_AccountDetails",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_CK_SAV_Accounttransactions_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Destination"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/COMPLETED/Completed_CK_SAV_Accounttransactions",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_CK_SAV_Accounttransactions_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/CK_SAV_Accounttransactions",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_CrossAccounts_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Destination"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/COMPLETED/Completed_CrossAccounts",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_CrossAccounts_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/CrossAccounts",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_DebitCardDetails_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Destination"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/COMPLETED/Completed_DebitCardDetails",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_DebitCardDetails_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/DebitCardDetails",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_MemberDataDetails_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Destination"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/COMPLETED/Completed_MemberDataDetails",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_MemberDataDetails_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/MemberDataDetails",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_NextlyAccountDetails_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Destination"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/COMPLETED/Completed_NextlyAccountDetails",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_NextlyAccountDetails_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/NextlyAccountDetails",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_NextlyAccountRoles_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Destination"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/COMPLETED/Completed_NextlyAccountRoles",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_NextlyAccountRoles_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/NextlyAccountRoles",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_NextlyAccountlockout_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Destination"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/COMPLETED/Completed_NextlyAccountlockout",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_NextlyAccountlockout_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/NextlyAccountlockout",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_NextlyLoanTransactions_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Destination"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/COMPLETED/Completed_NextlyLoanTransactions",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_NextlyLoanTransactions_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/NextlyLoanTransactions",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_UserCreditCards_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Destination"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/COMPLETED/Completed_UserCreditCards",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Completed_UserCreditCards_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Completed/Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/UserCreditCards",
						"container": "offline-services"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_BBAlertsDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BBAlertsDev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MigrationId",
						"type": "nvarchar"
					},
					{
						"name": "ProductVersion",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "__EFMigrationsHistory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BBAlertsDev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_CompletedThresholdSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "DEV/CompletedThreshold",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_CompletedThresholdSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "DEV/ThresholdAlerts",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_CompletedTransactionSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "DEV/CompletedTransaction",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_CompletedTransactionSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "DEV/TransactionAlerts",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_DoneProcessingDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "DoneProcessing@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "DEV/DoneProcessing",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "SubscriptionID",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_GetExternalAlertRecipientsDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "Alertsubscriber@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "DEV/Alertsubscriber",
						"container": {
							"value": "from-nextly",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "SubscriptionID",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_GetThresholdAlertSubscriptionsDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "ThresholdAlert@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "DEV/ThresholdAlert",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_GetTransactionAlertSubscriptionDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "TransactionAlert@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "DEV/TransactionAlertSubscription",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "SubscriptionID",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_SQLDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataDev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ActivitylogId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AdditionalInfo",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "Adaptive",
					"table": "ActivitylogAdditionalInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataDev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Destination_Offline_AccountTransactionsDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Archivedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Offline_Archival"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Offline",
					"table": "AccountTransactionsDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Destination_Offline_LoanTransactionsDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Archivedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Offline_Archival"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Offline",
					"table": "LoanTransactionsDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dev_ThresholdSinkDastaSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataDev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubscriptionID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BalanceAmount",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ExternalAlert_ThresholdStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataDev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dev_ThresholdSourceDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ThresholdFilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().ThresholdFilename",
							"type": "Expression"
						},
						"folderPath": "DEV/ThresholdAlerts",
						"container": "to-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "SubscriptionID|BalanceAmount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dev_TransactionSinkDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataDev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubscriptionID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmailContent",
						"type": "varchar"
					},
					{
						"name": "TextContent",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ExternalAlert_TransactionStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataDev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dev_TransactionSourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TransactionFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "DEV/TransactionAlerts",
						"container": "to-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetExternalAlerts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_FileShare",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": {
							"value": "@{formatDateTime(addHours(utcnow(), -4), 'yyyy')}/@{formatDateTime(addHours(utcnow(), -4), 'MM')}/@{formatDateTime(addHours(utcnow(), -4), 'dd')}/Alertsubscriber@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": {
							"value": "dev/GetExternalAlerts",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_FileShare')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflinSource_CCM_CreditCard_AccountDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"CCM_CreditCard_AccountDetails": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OfflineServices_DataSets/Source"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/CCM_CreditCard_AccountDetails",
						"container": "offline-services"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CurrentBalance",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "String"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "String"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "String"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "String"
					},
					{
						"name": "NextPaymentDueDate",
						"type": "String"
					},
					{
						"name": "CurrentDueDate",
						"type": "String"
					},
					{
						"name": "LastPaymentDate",
						"type": "String"
					},
					{
						"name": "LastPaymentAmount",
						"type": "String"
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "String"
					},
					{
						"name": "RegularPaymentAmount",
						"type": "String"
					},
					{
						"name": "InterestRate",
						"type": "String"
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "String"
					},
					{
						"name": "PayoffBalance",
						"type": "String"
					},
					{
						"name": "PayDownBalance",
						"type": "String"
					},
					{
						"name": "PrincipalBalance",
						"type": "String"
					},
					{
						"name": "AmountToPayCurrent",
						"type": "String"
					},
					{
						"name": "TotalPerDiem",
						"type": "String"
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "String"
					},
					{
						"name": "AmountPastDue",
						"type": "String"
					},
					{
						"name": "OriginalLoanAmount",
						"type": "String"
					},
					{
						"name": "CurrentTerm",
						"type": "String"
					},
					{
						"name": "RemainingTerm",
						"type": "String"
					},
					{
						"name": "RemainingPayments",
						"type": "String"
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "String"
					},
					{
						"name": "CreditLimitAmount",
						"type": "String"
					},
					{
						"name": "AvailableCredit",
						"type": "String"
					},
					{
						"name": "OpenDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflinSource_CK_SAV_Accounttransactions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"CK_SAV_Accounttransactionsons_Staging": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OfflineServices_DataSets/Source"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/CK_SAV_Accounttransactions",
						"container": "offline-services"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CurrentBalance",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "String"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "String"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "String"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "String"
					},
					{
						"name": "NextPaymentDueDate",
						"type": "String"
					},
					{
						"name": "CurrentDueDate",
						"type": "String"
					},
					{
						"name": "LastPaymentDate",
						"type": "String"
					},
					{
						"name": "LastPaymentAmount",
						"type": "String"
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "String"
					},
					{
						"name": "RegularPaymentAmount",
						"type": "String"
					},
					{
						"name": "InterestRate",
						"type": "String"
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "String"
					},
					{
						"name": "PayoffBalance",
						"type": "String"
					},
					{
						"name": "PayDownBalance",
						"type": "String"
					},
					{
						"name": "PrincipalBalance",
						"type": "String"
					},
					{
						"name": "AmountToPayCurrent",
						"type": "String"
					},
					{
						"name": "TotalPerDiem",
						"type": "String"
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "String"
					},
					{
						"name": "AmountPastDue",
						"type": "String"
					},
					{
						"name": "OriginalLoanAmount",
						"type": "String"
					},
					{
						"name": "CurrentTerm",
						"type": "String"
					},
					{
						"name": "RemainingTerm",
						"type": "String"
					},
					{
						"name": "RemainingPayments",
						"type": "String"
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "String"
					},
					{
						"name": "CreditLimitAmount",
						"type": "String"
					},
					{
						"name": "AvailableCredit",
						"type": "String"
					},
					{
						"name": "OpenDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflinSource_DebitCardDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DebitCardDetails": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OfflineServices_DataSets/Source"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/DebitCardDetails",
						"container": "offline-services"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CurrentBalance",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "String"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "String"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "String"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "String"
					},
					{
						"name": "NextPaymentDueDate",
						"type": "String"
					},
					{
						"name": "CurrentDueDate",
						"type": "String"
					},
					{
						"name": "LastPaymentDate",
						"type": "String"
					},
					{
						"name": "LastPaymentAmount",
						"type": "String"
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "String"
					},
					{
						"name": "RegularPaymentAmount",
						"type": "String"
					},
					{
						"name": "InterestRate",
						"type": "String"
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "String"
					},
					{
						"name": "PayoffBalance",
						"type": "String"
					},
					{
						"name": "PayDownBalance",
						"type": "String"
					},
					{
						"name": "PrincipalBalance",
						"type": "String"
					},
					{
						"name": "AmountToPayCurrent",
						"type": "String"
					},
					{
						"name": "TotalPerDiem",
						"type": "String"
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "String"
					},
					{
						"name": "AmountPastDue",
						"type": "String"
					},
					{
						"name": "OriginalLoanAmount",
						"type": "String"
					},
					{
						"name": "CurrentTerm",
						"type": "String"
					},
					{
						"name": "RemainingTerm",
						"type": "String"
					},
					{
						"name": "RemainingPayments",
						"type": "String"
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "String"
					},
					{
						"name": "CreditLimitAmount",
						"type": "String"
					},
					{
						"name": "AvailableCredit",
						"type": "String"
					},
					{
						"name": "OpenDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflinSource_MemberDataDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"MemberDataDetails": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OfflineServices_DataSets/Source"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/MemberDataDetails",
						"container": "offline-services"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CurrentBalance",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "String"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "String"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "String"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "String"
					},
					{
						"name": "NextPaymentDueDate",
						"type": "String"
					},
					{
						"name": "CurrentDueDate",
						"type": "String"
					},
					{
						"name": "LastPaymentDate",
						"type": "String"
					},
					{
						"name": "LastPaymentAmount",
						"type": "String"
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "String"
					},
					{
						"name": "RegularPaymentAmount",
						"type": "String"
					},
					{
						"name": "InterestRate",
						"type": "String"
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "String"
					},
					{
						"name": "PayoffBalance",
						"type": "String"
					},
					{
						"name": "PayDownBalance",
						"type": "String"
					},
					{
						"name": "PrincipalBalance",
						"type": "String"
					},
					{
						"name": "AmountToPayCurrent",
						"type": "String"
					},
					{
						"name": "TotalPerDiem",
						"type": "String"
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "String"
					},
					{
						"name": "AmountPastDue",
						"type": "String"
					},
					{
						"name": "OriginalLoanAmount",
						"type": "String"
					},
					{
						"name": "CurrentTerm",
						"type": "String"
					},
					{
						"name": "RemainingTerm",
						"type": "String"
					},
					{
						"name": "RemainingPayments",
						"type": "String"
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "String"
					},
					{
						"name": "CreditLimitAmount",
						"type": "String"
					},
					{
						"name": "AvailableCredit",
						"type": "String"
					},
					{
						"name": "OpenDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflinSource_NExtlyLoanTransaction')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NextlyLoanTransactions": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OfflineServices_DataSets/Source"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/NextlyLoanTransactions",
						"container": "offline-services"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CurrentBalance",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "String"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "String"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "String"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "String"
					},
					{
						"name": "NextPaymentDueDate",
						"type": "String"
					},
					{
						"name": "CurrentDueDate",
						"type": "String"
					},
					{
						"name": "LastPaymentDate",
						"type": "String"
					},
					{
						"name": "LastPaymentAmount",
						"type": "String"
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "String"
					},
					{
						"name": "RegularPaymentAmount",
						"type": "String"
					},
					{
						"name": "InterestRate",
						"type": "String"
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "String"
					},
					{
						"name": "PayoffBalance",
						"type": "String"
					},
					{
						"name": "PayDownBalance",
						"type": "String"
					},
					{
						"name": "PrincipalBalance",
						"type": "String"
					},
					{
						"name": "AmountToPayCurrent",
						"type": "String"
					},
					{
						"name": "TotalPerDiem",
						"type": "String"
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "String"
					},
					{
						"name": "AmountPastDue",
						"type": "String"
					},
					{
						"name": "OriginalLoanAmount",
						"type": "String"
					},
					{
						"name": "CurrentTerm",
						"type": "String"
					},
					{
						"name": "RemainingTerm",
						"type": "String"
					},
					{
						"name": "RemainingPayments",
						"type": "String"
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "String"
					},
					{
						"name": "CreditLimitAmount",
						"type": "String"
					},
					{
						"name": "AvailableCredit",
						"type": "String"
					},
					{
						"name": "OpenDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflinSource_NextlyAccountDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NextlyAccountDetails": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OfflineServices_DataSets/Source"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/NextlyAccountDetails",
						"container": "offline-services"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CurrentBalance",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "String"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "String"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "String"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "String"
					},
					{
						"name": "NextPaymentDueDate",
						"type": "String"
					},
					{
						"name": "CurrentDueDate",
						"type": "String"
					},
					{
						"name": "LastPaymentDate",
						"type": "String"
					},
					{
						"name": "LastPaymentAmount",
						"type": "String"
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "String"
					},
					{
						"name": "RegularPaymentAmount",
						"type": "String"
					},
					{
						"name": "InterestRate",
						"type": "String"
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "String"
					},
					{
						"name": "PayoffBalance",
						"type": "String"
					},
					{
						"name": "PayDownBalance",
						"type": "String"
					},
					{
						"name": "PrincipalBalance",
						"type": "String"
					},
					{
						"name": "AmountToPayCurrent",
						"type": "String"
					},
					{
						"name": "TotalPerDiem",
						"type": "String"
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "String"
					},
					{
						"name": "AmountPastDue",
						"type": "String"
					},
					{
						"name": "OriginalLoanAmount",
						"type": "String"
					},
					{
						"name": "CurrentTerm",
						"type": "String"
					},
					{
						"name": "RemainingTerm",
						"type": "String"
					},
					{
						"name": "RemainingPayments",
						"type": "String"
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "String"
					},
					{
						"name": "CreditLimitAmount",
						"type": "String"
					},
					{
						"name": "AvailableCredit",
						"type": "String"
					},
					{
						"name": "OpenDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflinSource_NextlyAccountRoles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NextlyAccountRoles": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OfflineServices_DataSets/Source"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/NextlyAccountRoles",
						"container": "offline-services"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CurrentBalance",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "String"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "String"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "String"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "String"
					},
					{
						"name": "NextPaymentDueDate",
						"type": "String"
					},
					{
						"name": "CurrentDueDate",
						"type": "String"
					},
					{
						"name": "LastPaymentDate",
						"type": "String"
					},
					{
						"name": "LastPaymentAmount",
						"type": "String"
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "String"
					},
					{
						"name": "RegularPaymentAmount",
						"type": "String"
					},
					{
						"name": "InterestRate",
						"type": "String"
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "String"
					},
					{
						"name": "PayoffBalance",
						"type": "String"
					},
					{
						"name": "PayDownBalance",
						"type": "String"
					},
					{
						"name": "PrincipalBalance",
						"type": "String"
					},
					{
						"name": "AmountToPayCurrent",
						"type": "String"
					},
					{
						"name": "TotalPerDiem",
						"type": "String"
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "String"
					},
					{
						"name": "AmountPastDue",
						"type": "String"
					},
					{
						"name": "OriginalLoanAmount",
						"type": "String"
					},
					{
						"name": "CurrentTerm",
						"type": "String"
					},
					{
						"name": "RemainingTerm",
						"type": "String"
					},
					{
						"name": "RemainingPayments",
						"type": "String"
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "String"
					},
					{
						"name": "CreditLimitAmount",
						"type": "String"
					},
					{
						"name": "AvailableCredit",
						"type": "String"
					},
					{
						"name": "OpenDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflinSource_NextlyAccountlockout')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NextlyAccountlockout": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OfflineServices_DataSets/Source"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/NextlyAccountlockout",
						"container": "offline-services"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CurrentBalance",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "String"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "String"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "String"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "String"
					},
					{
						"name": "NextPaymentDueDate",
						"type": "String"
					},
					{
						"name": "CurrentDueDate",
						"type": "String"
					},
					{
						"name": "LastPaymentDate",
						"type": "String"
					},
					{
						"name": "LastPaymentAmount",
						"type": "String"
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "String"
					},
					{
						"name": "RegularPaymentAmount",
						"type": "String"
					},
					{
						"name": "InterestRate",
						"type": "String"
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "String"
					},
					{
						"name": "PayoffBalance",
						"type": "String"
					},
					{
						"name": "PayDownBalance",
						"type": "String"
					},
					{
						"name": "PrincipalBalance",
						"type": "String"
					},
					{
						"name": "AmountToPayCurrent",
						"type": "String"
					},
					{
						"name": "TotalPerDiem",
						"type": "String"
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "String"
					},
					{
						"name": "AmountPastDue",
						"type": "String"
					},
					{
						"name": "OriginalLoanAmount",
						"type": "String"
					},
					{
						"name": "CurrentTerm",
						"type": "String"
					},
					{
						"name": "RemainingTerm",
						"type": "String"
					},
					{
						"name": "RemainingPayments",
						"type": "String"
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "String"
					},
					{
						"name": "CreditLimitAmount",
						"type": "String"
					},
					{
						"name": "AvailableCredit",
						"type": "String"
					},
					{
						"name": "OpenDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflinSource_NextlyCrossAccounts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"CrossAccounts": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OfflineServices_DataSets/Source"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/CrossAccounts",
						"container": "offline-services"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CurrentBalance",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "String"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "String"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "String"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "String"
					},
					{
						"name": "NextPaymentDueDate",
						"type": "String"
					},
					{
						"name": "CurrentDueDate",
						"type": "String"
					},
					{
						"name": "LastPaymentDate",
						"type": "String"
					},
					{
						"name": "LastPaymentAmount",
						"type": "String"
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "String"
					},
					{
						"name": "RegularPaymentAmount",
						"type": "String"
					},
					{
						"name": "InterestRate",
						"type": "String"
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "String"
					},
					{
						"name": "PayoffBalance",
						"type": "String"
					},
					{
						"name": "PayDownBalance",
						"type": "String"
					},
					{
						"name": "PrincipalBalance",
						"type": "String"
					},
					{
						"name": "AmountToPayCurrent",
						"type": "String"
					},
					{
						"name": "TotalPerDiem",
						"type": "String"
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "String"
					},
					{
						"name": "AmountPastDue",
						"type": "String"
					},
					{
						"name": "OriginalLoanAmount",
						"type": "String"
					},
					{
						"name": "CurrentTerm",
						"type": "String"
					},
					{
						"name": "RemainingTerm",
						"type": "String"
					},
					{
						"name": "RemainingPayments",
						"type": "String"
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "String"
					},
					{
						"name": "CreditLimitAmount",
						"type": "String"
					},
					{
						"name": "AvailableCredit",
						"type": "String"
					},
					{
						"name": "OpenDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflinSource_UserCreditCards')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"UserCreditCards": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OfflineServices_DataSets/Source"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/UserCreditCards",
						"container": "offline-services"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CurrentBalance",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "String"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "String"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "String"
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "String"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "String"
					},
					{
						"name": "NextPaymentDueDate",
						"type": "String"
					},
					{
						"name": "CurrentDueDate",
						"type": "String"
					},
					{
						"name": "LastPaymentDate",
						"type": "String"
					},
					{
						"name": "LastPaymentAmount",
						"type": "String"
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "String"
					},
					{
						"name": "RegularPaymentAmount",
						"type": "String"
					},
					{
						"name": "InterestRate",
						"type": "String"
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "String"
					},
					{
						"name": "PayoffBalance",
						"type": "String"
					},
					{
						"name": "PayDownBalance",
						"type": "String"
					},
					{
						"name": "PrincipalBalance",
						"type": "String"
					},
					{
						"name": "AmountToPayCurrent",
						"type": "String"
					},
					{
						"name": "TotalPerDiem",
						"type": "String"
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "String"
					},
					{
						"name": "AmountPastDue",
						"type": "String"
					},
					{
						"name": "OriginalLoanAmount",
						"type": "String"
					},
					{
						"name": "CurrentTerm",
						"type": "String"
					},
					{
						"name": "RemainingTerm",
						"type": "String"
					},
					{
						"name": "RemainingPayments",
						"type": "String"
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "String"
					},
					{
						"name": "CreditLimitAmount",
						"type": "String"
					},
					{
						"name": "AvailableCredit",
						"type": "String"
					},
					{
						"name": "OpenDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflineDestination_CCM_CreditCard_AccountDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Destination"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "CurrentBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "NextPaymentDueDate",
						"type": "date"
					},
					{
						"name": "CurrentDueDate",
						"type": "date"
					},
					{
						"name": "LastPaymentDate",
						"type": "date"
					},
					{
						"name": "LastPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RegularPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "InterestRate",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayoffBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayDownBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PrincipalBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountToPayCurrent",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalPerDiem",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountPastDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OriginalLoanAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingPayments",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "varchar"
					},
					{
						"name": "CreditLimitAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AvailableCredit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OpenDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CCM_CreditCard_AccountDetails_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflineDestination_CK_SAV_Accounttransactions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Destination"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "CurrentBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "NextPaymentDueDate",
						"type": "date"
					},
					{
						"name": "CurrentDueDate",
						"type": "date"
					},
					{
						"name": "LastPaymentDate",
						"type": "date"
					},
					{
						"name": "LastPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RegularPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "InterestRate",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayoffBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayDownBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PrincipalBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountToPayCurrent",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalPerDiem",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountPastDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OriginalLoanAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingPayments",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "varchar"
					},
					{
						"name": "CreditLimitAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AvailableCredit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OpenDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CK_SAV_Accounttransactions_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflineDestination_DebitCardDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Destination"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "CurrentBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "NextPaymentDueDate",
						"type": "date"
					},
					{
						"name": "CurrentDueDate",
						"type": "date"
					},
					{
						"name": "LastPaymentDate",
						"type": "date"
					},
					{
						"name": "LastPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RegularPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "InterestRate",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayoffBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayDownBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PrincipalBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountToPayCurrent",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalPerDiem",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountPastDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OriginalLoanAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingPayments",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "varchar"
					},
					{
						"name": "CreditLimitAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AvailableCredit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OpenDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DebitCardDetails_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflineDestination_MemberDataDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Destination"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "CurrentBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "NextPaymentDueDate",
						"type": "date"
					},
					{
						"name": "CurrentDueDate",
						"type": "date"
					},
					{
						"name": "LastPaymentDate",
						"type": "date"
					},
					{
						"name": "LastPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RegularPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "InterestRate",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayoffBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayDownBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PrincipalBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountToPayCurrent",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalPerDiem",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountPastDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OriginalLoanAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingPayments",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "varchar"
					},
					{
						"name": "CreditLimitAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AvailableCredit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OpenDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "MemberDataDetails_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflineDestination_NextlyAccountDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Destination"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "CurrentBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "NextPaymentDueDate",
						"type": "date"
					},
					{
						"name": "CurrentDueDate",
						"type": "date"
					},
					{
						"name": "LastPaymentDate",
						"type": "date"
					},
					{
						"name": "LastPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RegularPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "InterestRate",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayoffBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayDownBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PrincipalBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountToPayCurrent",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalPerDiem",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountPastDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OriginalLoanAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingPayments",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "varchar"
					},
					{
						"name": "CreditLimitAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AvailableCredit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OpenDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "StagingTable_AccountDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflineDestination_NextlyAccountRoles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Destination"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "CurrentBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "NextPaymentDueDate",
						"type": "date"
					},
					{
						"name": "CurrentDueDate",
						"type": "date"
					},
					{
						"name": "LastPaymentDate",
						"type": "date"
					},
					{
						"name": "LastPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RegularPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "InterestRate",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayoffBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayDownBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PrincipalBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountToPayCurrent",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalPerDiem",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountPastDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OriginalLoanAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingPayments",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "varchar"
					},
					{
						"name": "CreditLimitAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AvailableCredit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OpenDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "NextlyAccountRoles_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflineDestination_NextlyAccountlockout')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Destination"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "CurrentBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "NextPaymentDueDate",
						"type": "date"
					},
					{
						"name": "CurrentDueDate",
						"type": "date"
					},
					{
						"name": "LastPaymentDate",
						"type": "date"
					},
					{
						"name": "LastPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RegularPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "InterestRate",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayoffBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayDownBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PrincipalBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountToPayCurrent",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalPerDiem",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountPastDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OriginalLoanAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingPayments",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "varchar"
					},
					{
						"name": "CreditLimitAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AvailableCredit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OpenDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "NextlyAccountlockout_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflineDestination_NextlyCrossAccounts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Destination"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "CurrentBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "NextPaymentDueDate",
						"type": "date"
					},
					{
						"name": "CurrentDueDate",
						"type": "date"
					},
					{
						"name": "LastPaymentDate",
						"type": "date"
					},
					{
						"name": "LastPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RegularPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "InterestRate",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayoffBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayDownBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PrincipalBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountToPayCurrent",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalPerDiem",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountPastDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OriginalLoanAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingPayments",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "varchar"
					},
					{
						"name": "CreditLimitAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AvailableCredit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OpenDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "NextlyCrossAccounts_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflineDestination_NextlyLoanTransactions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Destination"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "CurrentBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "NextPaymentDueDate",
						"type": "date"
					},
					{
						"name": "CurrentDueDate",
						"type": "date"
					},
					{
						"name": "LastPaymentDate",
						"type": "date"
					},
					{
						"name": "LastPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RegularPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "InterestRate",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayoffBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayDownBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PrincipalBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountToPayCurrent",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalPerDiem",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountPastDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OriginalLoanAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingPayments",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "varchar"
					},
					{
						"name": "CreditLimitAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AvailableCredit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OpenDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "NExtlyLoanTransactions_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OfflineDestination_UserCreditCards')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Destination"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "CurrentBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeEscrow",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceEscrow",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeUnapplied",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceUnapplied",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "BalanceCategoryCodeLoanInProcess",
						"type": "varchar"
					},
					{
						"name": "CurrentBalanceLoanInProcess",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "NextPaymentDueDate",
						"type": "date"
					},
					{
						"name": "CurrentDueDate",
						"type": "date"
					},
					{
						"name": "LastPaymentDate",
						"type": "date"
					},
					{
						"name": "LastPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RegularPaymentAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "InterestRate",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "PriorYearInterestPaid",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayoffBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PayDownBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "PrincipalBalance",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountToPayCurrent",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalPerDiem",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalAmountCurrentlyDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AmountPastDue",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OriginalLoanAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CurrentTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingTerm",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RemainingPayments",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentCalculationPeriod",
						"type": "varchar"
					},
					{
						"name": "CreditLimitAmount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AvailableCredit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OpenDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "UserCreditCards_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PRODTransactionSinkDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataPROD",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "SubscriptionID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "EmailContent",
						"type": "varchar"
					},
					{
						"name": "SMSContent",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ExternalAlert_TransactionStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_BBAlertsDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BBAlertsPROD",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "Key",
						"type": "nvarchar"
					},
					{
						"name": "Value",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExpireAt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "schedule",
					"table": "Counter"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BBAlertsPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_CompletedLoanDueAlertsSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/CompletedLoanDueAlerts",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_CompletedLoanDueAlertsSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/CompletedLoanDueAlerts",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_CompletedThresholdSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/CompletedThreshold",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_CompletedThresholdSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/ThresholdAlerts",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_CompletedTransactionSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/CompletedTransaction",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_CompletedTransactionSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/TransactionAlerts",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_DoneProcessingDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "DoneProcessing@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "PROD/DoneProcessing",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_EmulationActivityDynamicDescriptionValue_Souce')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Businessdata_PROD",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataRetentionDatasets/static"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmulationActivityLogID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ActivityDynamicDescriptionValue",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "EmulationActivityDynamicDescriptionValue"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Businessdata_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_GetExternalAlertRecipientsDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "Alertsubscriber@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "PROD/Alertsubscriber",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_GetThresholdAlertSubscriptionsDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "ThresholdAlert@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "PROD/ThresholdAlertSubscription",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_GetTransactionAlertSubscriptionsDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "TransactionAlert@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "PROD/TransactionAlertSubscription",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_LoanDue_DataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "LoanDueAlerts@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "PROD/LoanDueAlerts",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_MemberActivityDynamicDescriptionValue_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Archivedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataRetentionDatasets/static"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "MemberActivityLogID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ActivityDynamicDescriptionValue",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "BusinessData",
					"table": "MemberActivityDynamicDescriptionValue"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_MemberActivityDynamicDescriptionValue_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Businessdata_PROD",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataRetentionDatasets/static"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "MemberActivityLogID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ActivityDynamicDescriptionValue",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "MemberActivityDynamicDescriptionValue"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Businessdata_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_SQLDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataPROD",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ActivitylogId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AdditionalInfo",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "Adaptive",
					"table": "ActivitylogAdditionalInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_ThresholSinkDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataPROD",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "SubscriptionID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BalanceAmount",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ExternalAlert_ThresholdStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_ThresholdSourceDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ThresholdFilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().ThresholdFilename",
							"type": "Expression"
						},
						"folderPath": "PROD/ThresholdAlerts",
						"container": "to-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "SubscriptionID|BalanceAmount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_TransactionSourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TransactionFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/TransactionAlerts",
						"container": "to-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_TransferMemberActivityLog_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Archivedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataRetentionDatasets/static"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MemberActivityLogID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PayeeOrDestination",
						"type": "varchar"
					},
					{
						"name": "TransactionAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SourceAccountNumber",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "BusinessData",
					"table": "TransferMemberActivityLog"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_TransferMemberActivityLog_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Businessdata_PROD",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataRetentionDatasets/static"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MemberActivityLogID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PayeeOrDestination",
						"type": "varchar"
					},
					{
						"name": "TransactionAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SourceAccountNumber",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TransferMemberActivityLog"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Businessdata_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_emulation_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Archivedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataRetentionDatasets/static"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmulationActivityLogID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ActivityDynamicDescriptionValue",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "BusinessData",
					"table": "EmulationActivityDynamicDescriptionValue"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Prod_LoanDueAlertsSinkDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataPROD",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "SubscriptionID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DueDate",
						"type": "date"
					},
					{
						"name": "AmountDue",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "External_LoanDueAlertStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Prod_LoanDueAlertsSourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TransactionFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PROD/LoanDueAlerts",
						"container": "to-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_Admin_LogDB_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_AdminLogdb_PROD",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceDB": {
						"type": "string"
					},
					"SourceTable": {
						"type": "string"
					},
					"SourceSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetentionDatasets/Dynamic"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ErrorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantID",
						"type": "varchar"
					},
					{
						"name": "FormID",
						"type": "varchar"
					},
					{
						"name": "SystemIP",
						"type": "varchar"
					},
					{
						"name": "SiteURL",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Message",
						"type": "nvarchar"
					},
					{
						"name": "InnerException",
						"type": "nvarchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SourceSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_AdminLogdb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_Admin_MetaDB_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_AdminMetadb_PROD",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceDB": {
						"type": "string"
					},
					"SourceTable": {
						"type": "string"
					},
					"SourceSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetentionDatasets/Dynamic"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ErrorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantID",
						"type": "varchar"
					},
					{
						"name": "FormID",
						"type": "varchar"
					},
					{
						"name": "SystemIP",
						"type": "varchar"
					},
					{
						"name": "SiteURL",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Message",
						"type": "nvarchar"
					},
					{
						"name": "InnerException",
						"type": "nvarchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SourceSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_AdminMetadb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_Anonymous_LogDB_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_AnonymousLogdb_PROD",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceDB": {
						"type": "string"
					},
					"SourceTable": {
						"type": "string"
					},
					"SourceSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetentionDatasets/Dynamic"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ErrorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantID",
						"type": "varchar"
					},
					{
						"name": "FormID",
						"type": "varchar"
					},
					{
						"name": "SystemIP",
						"type": "varchar"
					},
					{
						"name": "SiteURL",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Message",
						"type": "nvarchar"
					},
					{
						"name": "InnerException",
						"type": "nvarchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SourceSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_AnonymousLogdb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_Anonymous_MetaDB_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_AnonymousMetadb_PROD",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceDB": {
						"type": "string"
					},
					"SourceTable": {
						"type": "string"
					},
					"SourceSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetentionDatasets/Dynamic"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ErrorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantID",
						"type": "varchar"
					},
					{
						"name": "FormID",
						"type": "varchar"
					},
					{
						"name": "SystemIP",
						"type": "varchar"
					},
					{
						"name": "SiteURL",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Message",
						"type": "nvarchar"
					},
					{
						"name": "InnerException",
						"type": "nvarchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SourceSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_AnonymousMetadb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_ArchiveSqlDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Archivedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataRetentionDatasets/Dynamic"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DBName",
						"type": "varchar"
					},
					{
						"name": "SchemaName",
						"type": "varchar"
					},
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "KeyColumn",
						"type": "varchar"
					},
					{
						"name": "PurgeDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ArchiveDays",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "MasterConfig"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Archivedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_BBAlerts_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Logdb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceDB": {
						"type": "string"
					},
					"SourceTable": {
						"type": "string"
					},
					"SourceSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetentionDatasets/Dynamic"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ErrorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantID",
						"type": "varchar"
					},
					{
						"name": "FormID",
						"type": "varchar"
					},
					{
						"name": "SystemIP",
						"type": "varchar"
					},
					{
						"name": "SiteURL",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Message",
						"type": "nvarchar"
					},
					{
						"name": "InnerException",
						"type": "nvarchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SourceSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Logdb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_BusinessData_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Businessdata_PROD",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceDB": {
						"type": "string"
					},
					"SourceTable": {
						"type": "string"
					},
					"SourceSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetentionDatasets/Dynamic"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ErrorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantID",
						"type": "varchar"
					},
					{
						"name": "FormID",
						"type": "varchar"
					},
					{
						"name": "SystemIP",
						"type": "varchar"
					},
					{
						"name": "SiteURL",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Message",
						"type": "nvarchar"
					},
					{
						"name": "InnerException",
						"type": "nvarchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SourceSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Businessdata_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_LogDBMI_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Logdb_PROD",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceDB": {
						"type": "string"
					},
					"SourceTable": {
						"type": "string"
					},
					"SourceSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetentionDatasets/Dynamic"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ErrorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantID",
						"type": "varchar"
					},
					{
						"name": "FormID",
						"type": "varchar"
					},
					{
						"name": "SystemIP",
						"type": "varchar"
					},
					{
						"name": "SiteURL",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Message",
						"type": "nvarchar"
					},
					{
						"name": "InnerException",
						"type": "nvarchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SourceSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Logdb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_LogDB_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Logdb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceDB": {
						"type": "string"
					},
					"SourceTable": {
						"type": "string"
					},
					"SourceSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetentionDatasets/Dynamic"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ErrorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantID",
						"type": "varchar"
					},
					{
						"name": "FormID",
						"type": "varchar"
					},
					{
						"name": "SystemIP",
						"type": "varchar"
					},
					{
						"name": "SiteURL",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Message",
						"type": "nvarchar"
					},
					{
						"name": "InnerException",
						"type": "nvarchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SourceSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Logdb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCUPROD_MetaDB_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_Metadb_PROD",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceDB": {
						"type": "string"
					},
					"SourceTable": {
						"type": "string"
					},
					"SourceSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataRetentionDatasets/Dynamic"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "ErrorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TenantID",
						"type": "varchar"
					},
					{
						"name": "FormID",
						"type": "varchar"
					},
					{
						"name": "SystemIP",
						"type": "varchar"
					},
					{
						"name": "SiteURL",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Message",
						"type": "nvarchar"
					},
					{
						"name": "InnerException",
						"type": "nvarchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SourceSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_Metadb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Offline_AccountTransactionsDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Offline_Archival"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ObjectGUID",
						"type": "varchar"
					},
					{
						"name": "AccountNumber",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "RTXNNumber",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PostingDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ActivityDate",
						"type": "date"
					},
					{
						"name": "DebitCreditFlag",
						"type": "varchar"
					},
					{
						"name": "Statuscode",
						"type": "varchar"
					},
					{
						"name": "StatusDescription",
						"type": "varchar"
					},
					{
						"name": "RTXNTypecode",
						"type": "varchar"
					},
					{
						"name": "RTXNTypeDescription",
						"type": "varchar"
					},
					{
						"name": "Amount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "ExternalRTXNDescText",
						"type": "varchar"
					},
					{
						"name": "InternalRTXNDescText",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "AccountTransactionsDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Offline_LoanTransactionsDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_OfflineModedb_PROD_DTU",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OfflineServices_DataSets/Offline_Archival"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ObjectGUID",
						"type": "varchar"
					},
					{
						"name": "AccountNumber",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "RTXNNumber",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PostingDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ActivityDate",
						"type": "date"
					},
					{
						"name": "DebitCreditFlag",
						"type": "varchar"
					},
					{
						"name": "Statuscode",
						"type": "varchar"
					},
					{
						"name": "StatusDescription",
						"type": "varchar"
					},
					{
						"name": "RTXNTypecode",
						"type": "varchar"
					},
					{
						"name": "RTXNTypeDescription",
						"type": "varchar"
					},
					{
						"name": "Amount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "ExternalRTXNDescText",
						"type": "varchar"
					},
					{
						"name": "InternalRTXNDescText",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "LoanTransactionsDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_OfflineModedb_PROD_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_BBAlertsDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BBAlertsUAT",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Key",
						"type": "nvarchar"
					},
					{
						"name": "Value",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ExpireAt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "schedule",
					"table": "AggregatedCounter"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BBAlertsUAT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_CompletedThresholdSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "UAT/CompletedThreshold",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_CompletedThresholdSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "UAT/ThresholdAlerts",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_CompletedTransactionSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "UAT/CompletedTransaction",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_CompletedTransactionSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "UAT/TransactionAlerts",
						"container": "to-nextly"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_DoneProcessingDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "DoneProcessing@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "UAT/DoneProcessing",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_GetExternalAlertRecipientsDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "Alertsubscriber@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "UAT/Alertsubscriber",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_GetThresholdAlertSubscriptionsDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "ThresholdAlert@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "UAT/ThresholdAlertSubscription",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_GetTransactionAlertSubscriptionsDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "TransactionAlert@{formatDateTime(addHours(utcnow(), -4), 'MMddyyyyHHmm')}.txt",
							"type": "Expression"
						},
						"folderPath": "UAT/TransactionAlertSubscription",
						"container": "from-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_SQLDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataUAT",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "StartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "varchar"
					},
					{
						"name": "ContentType",
						"type": "varchar"
					},
					{
						"name": "ContentLocation",
						"type": "varchar"
					},
					{
						"name": "Content",
						"type": "varchar"
					},
					{
						"name": "Start/Stop",
						"type": "bit"
					},
					{
						"name": "CampaignViewFor",
						"type": "varchar"
					},
					{
						"name": "OtherOption",
						"type": "bit"
					},
					{
						"name": "RedirectPage",
						"type": "varchar"
					},
					{
						"name": "RedirectURL",
						"type": "varchar"
					},
					{
						"name": "LaterOption",
						"type": "varchar"
					},
					{
						"name": "IntegrationWith",
						"type": "varchar"
					},
					{
						"name": "SocialMediaTitle",
						"type": "varchar"
					},
					{
						"name": "SocialMediaContent",
						"type": "varchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedBy",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsDelete",
						"type": "bit"
					},
					{
						"name": "Priority",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Keywords",
						"type": "varchar"
					},
					{
						"name": "ExcelGUID",
						"type": "varchar"
					},
					{
						"name": "Location",
						"type": "varchar"
					},
					{
						"name": "CampaignType",
						"type": "varchar"
					},
					{
						"name": "NoTrueExit",
						"type": "bit"
					},
					{
						"name": "CampaignTypeExit",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "AdminCampaign"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataUAT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_ThresholdSinkDastaSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataUAT",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubscriptionID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BalanceAmount",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "",
					"table": "ExternalAlert_ThresholdStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataUAT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_ThresholdSourceDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ThresholdFilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().ThresholdFilename",
							"type": "Expression"
						},
						"folderPath": "UAT/ThresholdAlerts",
						"container": "to-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "SubscriptionID|BalanceAmount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_TransactionSinkDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataUAT",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubscriptionID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmailContent",
						"type": "varchar"
					},
					{
						"name": "TextContent",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ExternalAlert_TransactionStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_BusinessDataUAT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UAT_TransactionSourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SCCU_DataFactory_Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TransactionFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "UAT/TransactionAlerts",
						"container": "to-nextly"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SCCU_DataFactory_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_AdminLogdb_PROD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"server": "[parameters('SCCU_AdminLogdb_PROD_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_AdminLogdb_PROD_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_SCCU_AdminLogdb_PROD",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_SCCU_AdminLogdb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_AdminMetadb_PROD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"server": "[parameters('SCCU_AdminMetadb_PROD_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_AdminMetadb_PROD_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_SCCU_AdminMetadb_PROD",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_SCCU_AdminMetadb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_AnonymousLogdb_PROD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"server": "[parameters('SCCU_AnonymousLogdb_PROD_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_AnonymousLogdb_PROD_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_SCCU_AnonymousLogdb_PROD",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_SCCU_AnonymousLogdb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_AnonymousMetadb_PROD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"server": "[parameters('SCCU_AnonymousMetadb_PROD_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_AnonymousMetadb_PROD_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_SCCU_AnonymousMetadb_PROD",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_SCCU_AnonymousMetadb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_Archivedb_PROD_DTU')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('SCCU_Archivedb_PROD_DTU_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_Archivedb_PROD_DTU_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_Prod_DTU",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_Prod_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_BBAlertsDev')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('SCCU_BBAlertsDev_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_BBAlertsDev_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "credential_SCCU_BBAlertsDev",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/credential_SCCU_BBAlertsDev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_BBAlertsPROD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"server": "[parameters('SCCU_BBAlertsPROD_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_BBAlertsPROD_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_SCCU_BBAlertsPROD",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_SCCU_BBAlertsPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_BBAlertsUAT')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('SCCU_BBAlertsUAT_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_BBAlertsUAT_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_SCCUUAT_BBAlerts",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_SCCUUAT_BBAlerts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_BusinessDataDev')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "For DEV SQL Server",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('SCCU_BusinessDataDev_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_BusinessDataDev_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credentials_BusinessDataDev",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credentials_BusinessDataDev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_BusinessDataPROD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"server": "[parameters('SCCU_BusinessDataPROD_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_BusinessDataPROD_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_SCCU_BusinessDataPROD",
						"type": "CredentialReference"
					},
					"alwaysEncryptedSettings": {
						"alwaysEncryptedAkvAuthType": "ManagedIdentity"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_SCCU_BusinessDataPROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_BusinessDataUAT')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('SCCU_BusinessDataUAT_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_BusinessDataUAT_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_SCCU_BusinessDataUAT",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_SCCU_BusinessDataUAT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_Businessdata_PROD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"server": "[parameters('SCCU_Businessdata_PROD_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_Businessdata_PROD_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_SCCU_Businessdata_PROD",
						"type": "CredentialReference"
					},
					"alwaysEncryptedSettings": {
						"alwaysEncryptedAkvAuthType": "ManagedIdentity"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_SCCU_Businessdata_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_DataFactory_FileShare')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('SCCU_DataFactory_FileShare_connectionString')]",
					"fileShare": "sccudatafactoryfileshare"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_DataFactory_Storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "sccudatafactorystorage",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('SCCU_DataFactory_Storage_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2",
					"credential": {
						"referenceName": "Credentials_sccudatafactorystorage",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credentials_sccudatafactorystorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_DataFactory_Storage_V2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('SCCU_DataFactory_Storage_V2_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2",
					"credential": {
						"referenceName": "Credentials_sccudatafactorystorage",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credentials_sccudatafactorystorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_Logdb_PROD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"server": "[parameters('SCCU_Logdb_PROD_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_Logdb_PROD_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_Prod_SQL_MI",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_Prod_SQL_MI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_Logdb_PROD_DTU')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('SCCU_Logdb_PROD_DTU_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_Logdb_PROD_DTU_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_Prod_DTU",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_Prod_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_LogsMonitorMetadb_PROD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"server": "[parameters('SCCU_LogsMonitorMetadb_PROD_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_LogsMonitorMetadb_PROD_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_SCCU_LogsMonitorMetadb_PROD",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_SCCU_LogsMonitorMetadb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_Metadb_PROD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"server": "[parameters('SCCU_Metadb_PROD_properties_typeProperties_server')]",
					"database": "[parameters('SCCU_Metadb_PROD_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "UserAssignedManagedIdentity",
					"credential": {
						"referenceName": "Credential_SCCU_Metadb_PROD",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_SCCU_Metadb_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_OfflineModedb_PROD_DTU')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SCCU_OfflineModedb_PROD_DTU_connectionString')]",
					"credential": {
						"referenceName": "Credential_Prod_DTU",
						"type": "CredentialReference"
					},
					"alwaysEncryptedSettings": {
						"alwaysEncryptedAkvAuthType": "ManagedIdentity"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/credentials/Credential_Prod_DTU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACISeri_Biweekly')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "BacPac Tables ACISeri_CheckFree_Vsofts_WeeklyTwice",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 4,
						"startTime": "2025-01-29T10:35:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/BacPac Tables ACISeri_CheckFree_Vsofts_WeeklyTwice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ActivityLog_Weekly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "BacPac ActivityLog_Weekly",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2025-02-17T12:00:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"weekDays": [
								"Monday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/BacPac ActivityLog_Weekly')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Log_Log_Biweekly')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "BacPac Tables Log_LogTables_WeeklyTwice",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 4,
						"startTime": "2025-01-31T10:35:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/BacPac Tables Log_LogTables_WeeklyTwice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Offline_Service_Prod_Scheduled')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-01-27T13:30:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_DataRetentionTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "00_DailyRetention_Main",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-10-23T10:30:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/00_DailyRetention_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_LoanDueTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Nextly_LoanDueAlerts_PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileName": "[parameters('PROD_LoanDueTrigger_properties_Nextly_LoanDueAlerts_PROD_parameters_FileName')]",
							"FilePath": "[parameters('PROD_LoanDueTrigger_properties_Nextly_LoanDueAlerts_PROD_parameters_FilePath')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/to-nextly/blobs/PROD/LoanDueAlerts",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('PROD_LoanDueTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Nextly_LoanDueAlerts_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_ThresholAlert')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Nextly_ThresholdAlert_PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileName": "[parameters('PROD_ThresholAlert_properties_Nextly_ThresholdAlert_PROD_parameters_FileName')]",
							"FilePath": "[parameters('PROD_ThresholAlert_properties_Nextly_ThresholdAlert_PROD_parameters_FilePath')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/to-nextly/blobs/PROD/ThresholdAlerts",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('PROD_ThresholAlert_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Nextly_ThresholdAlert_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_TransactionAlert')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Nextly_TransactionAlert_PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileName": "[parameters('PROD_TransactionAlert_properties_Nextly_TransactionAlert_PROD_parameters_FileName')]",
							"FilePath": "[parameters('PROD_TransactionAlert_properties_Nextly_TransactionAlert_PROD_parameters_FilePath')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/to-nextly/blobs/PROD/TransactionAlerts",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('PROD_TransactionAlert_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Nextly_TransactionAlert_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROD_sccu_loanDueTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SCCU_LoanDueAlerts_PROD",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-10-12T18:00:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SCCU_LoanDueAlerts_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Prod_Alerts_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SCCUAlerts_PROD",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2024-08-03T01:00:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SCCUAlerts_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Prod_DoneProcessing_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SCCUDoneProcessing_PROD",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2024-08-03T01:00:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SCCUDoneProcessing_PROD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCCU_Offline_Prod_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "00_Offline_Main",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-02-14T13:30:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/00_Offline_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ToNextlyLoanDueAlert_Prod')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/to-nextly/blobs/PROD/LoanDueAlerts",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('ToNextlyLoanDueAlert_Prod_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ToNextlyThresholdAlert_Prod')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/to-nextly/blobs/PROD/ThresholdAlerts",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('ToNextlyThresholdAlert_Prod_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ToNextlyTransactionAlert_Prod')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/to-nextly/blobs/PROD/TransactionAlerts",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('ToNextlyTransactionAlert_Prod_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_Prod_DTU')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_Prod_SQL_MI')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_SCCUUAT_BBAlerts')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_SCCU_AdminLogdb_PROD')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_SCCU_AdminMetadb_PROD')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_SCCU_AnonymousLogdb_PROD')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_SCCU_AnonymousMetadb_PROD')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_SCCU_BBAlertsPROD')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_SCCU_BusinessDataPROD')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_SCCU_BusinessDataUAT')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_SCCU_Businessdata_PROD')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_SCCU_LogsMonitorMetadb_PROD')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credential_SCCU_Metadb_PROD')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credentials_BusinessDataDev')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "For Dev SQL Server",
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Credentials_sccudatafactorystorage')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "sccudatafactorystorage",
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/credential_SCCU_BBAlertsDev')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/a8cd236d-26bd-46eb-81fc-dea8aac0fe3c/resourcegroups/SCCU-EU-PROD-SRV-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/SCCU-EU-ADF"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/SCCU-KEYVAULT')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('SCCU-KEYVAULT_properties_privateLinkResourceId')]",
				"groupId": "[parameters('SCCU-KEYVAULT_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/SCCU_DataFactory_FileShare')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('SCCU_DataFactory_FileShare_properties_privateLinkResourceId')]",
				"groupId": "[parameters('SCCU_DataFactory_FileShare_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/sccudatafactorystorage')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('sccudatafactorystorage_properties_privateLinkResourceId')]",
				"groupId": "[parameters('sccudatafactorystorage_properties_groupId')]",
				"fqdns": "[parameters('sccudatafactorystorage_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/sccudatafactorystorage01')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('sccudatafactorystorage01_properties_privateLinkResourceId')]",
				"groupId": "[parameters('sccudatafactorystorage01_properties_groupId')]",
				"fqdns": "[parameters('sccudatafactorystorage01_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/sccudrsql01')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('sccudrsql01_properties_privateLinkResourceId')]",
				"groupId": "[parameters('sccudrsql01_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/sccuprodsql01')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('sccuprodsql01_properties_privateLinkResourceId')]",
				"groupId": "[parameters('sccuprodsql01_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/sccustagesql02_Temp')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('sccustagesql02_Temp_properties_privateLinkResourceId')]",
				"groupId": "[parameters('sccustagesql02_Temp_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}